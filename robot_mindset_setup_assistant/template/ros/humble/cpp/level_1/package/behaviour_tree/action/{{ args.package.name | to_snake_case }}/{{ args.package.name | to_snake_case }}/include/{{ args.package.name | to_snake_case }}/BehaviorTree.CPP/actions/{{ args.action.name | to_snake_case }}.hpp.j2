{% set identifier = args.action.name | default('ActionNode', true) %}
{% set class_name = args.action.class_name | default(identifier | to_pascal_case) %}
{% set base_class = args.action.base_class | default('SyncActionNode') %}
{% set file_stem = identifier | to_snake_case %}

#pragma once

#include <string>
#include <fmt/format.h>

#include <behaviortree_cpp/action_node.h>
#include <behaviortree_cpp/exceptions.h>

namespace {{ args.package.name | to_snake_case }}::bt::actions {

class {{ class_name }} final : public BT::{{ base_class }} {
public:
  explicit {{ class_name }}(const std::string &name, const BT::NodeConfiguration &config);

  static BT::PortsList providedPorts();

{% if base_class == 'StatefulActionNode' %}
  BT::NodeStatus onStart() override;
  BT::NodeStatus onRunning() override;
  void onHalted() override;
{% elif base_class == 'AsyncActionNode' %}
  BT::NodeStatus tick() override;
  void halt() override;
{% else %}
  BT::NodeStatus tick() override;
{% endif %}
};

}  // namespace {{ args.package.name | to_snake_case }}::bt::actions

