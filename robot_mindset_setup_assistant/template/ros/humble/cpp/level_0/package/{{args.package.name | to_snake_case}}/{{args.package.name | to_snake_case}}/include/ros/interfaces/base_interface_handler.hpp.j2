#pragma once

#include <rclcpp/rclcpp.hpp>
#include <memory>

namespace {{ args.package.name |to_snake_case}} {

/**
 * @brief Base interface for all ROS interface handlers
 * 
 * This abstract base class provides a common interface for all ROS interface types
 * (topics, services, actions, parameters) using composition pattern.
 */
class BaseInterfaceHandler {
public:
    explicit BaseInterfaceHandler(rclcpp::Node* node) : node_(node) {}
    virtual ~BaseInterfaceHandler() = default;

    /**
     * @brief Initialize the handler
     * Called during ROS node initialization
     */
    virtual void initialize() = 0;

    /**
     * @brief Shutdown the handler
     * Called during ROS node shutdown
     */
    virtual void shutdown() {}

protected:
    rclcpp::Node* node_;  ///< Reference to the ROS node
};

} // namespace {{ args.package.name |to_snake_case}}