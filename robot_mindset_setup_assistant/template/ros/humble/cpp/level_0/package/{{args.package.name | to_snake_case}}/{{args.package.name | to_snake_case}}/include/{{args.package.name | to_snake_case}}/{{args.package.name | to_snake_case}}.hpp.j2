#pragma once

#include <string>
#include <spdlog/spdlog.h>

#include "{{ args.package.name |to_snake_case}}/handlers/topic_handler.hpp"
#include "{{ args.package.name |to_snake_case}}/handlers/service_handler.hpp"
#include "{{ args.package.name |to_snake_case}}/handlers/action_handler.hpp"
#include "{{ args.package.name |to_snake_case}}/handlers/parameter_handler.hpp"

/**
 * @file {{ args.package.name |to_snake_case}}.hpp
 * @brief LogicModule class definition for non-ROS business logic
 * 
 * This header defines the LogicModule class which contains the core business
 * logic of your application, separated from ROS-specific code.
 * 
 * The LogicModule composes specialized handler classes, providing accessors to:
 * - TopicHandler for publish/subscribe business logic
 * - ServiceHandler for service server/client workflows
 * - ActionHandler for action goal execution and client calls
 * - ParameterHandler for runtime configuration changes
 *
 * KEY PRINCIPLES:
 * - No direct ROS dependencies in this class
 * - Business logic remains isolated and testable
 * - ROS communication is delegated to handler callbacks
 * - Handler composition keeps interface concerns clearly separated
 */

namespace {{ args.package.name |to_snake_case}} {

/**
 * @class LogicModule
 * @brief Core business logic class for {{ args.package.name }}
 * 
 * This class implements the actual business logic for your ROS node,
 * separated from ROS infrastructure concerns. It uses composition and
 * delegation patterns to organize interface handling:
 * 
 * - TopicHandler: Manages topic publish/subscribe operations
 * - ServiceHandler: Manages service server/client operations
 * - ActionHandler: Manages action server/client operations
 * - ParameterHandler: Manages runtime parameter changes
 * 
 * All ROS communication is handled through callback functions provided
 * by the ROS layer, maintaining clean separation of concerns.
 */
class LogicModule
{
public:
    LogicModule();
    
    // =============================================================================
    // HANDLER ACCESS METHODS
    // =============================================================================
    // Provide access to the specialized handlers for each interface type
    
    /**
     * @brief Get the topic handler for publish/subscribe operations
     * @return Reference to the topic handler
     */
    TopicHandler& topic_handler() { return topic_handler_; }
    const TopicHandler& topic_handler() const { return topic_handler_; }
    
    /**
     * @brief Get the service handler for server/client operations
     * @return Reference to the service handler
     */
    ServiceHandler& service_handler() { return service_handler_; }
    const ServiceHandler& service_handler() const { return service_handler_; }
    
    /**
     * @brief Get the action handler for server/client operations
     * @return Reference to the action handler
     */
    ActionHandler& action_handler() { return action_handler_; }
    const ActionHandler& action_handler() const { return action_handler_; }
    
    /**
     * @brief Get the parameter handler for runtime configuration
     * @return Reference to the parameter handler
     */
    ParameterHandler& parameter_handler() { return parameter_handler_; }
    const ParameterHandler& parameter_handler() const { return parameter_handler_; }
    
    /**
     * @brief Set the logging level for spdlog
     * @param level_str Log level string ("debug", "info", "warn", "error", "fatal")
     */
    void set_logger_level(std::string level_str);

    // Example/test functions - remove these in your implementation
    std::string greet(const std::string& name) const;
    void spdlog_test(double number) const;

private:
    // =============================================================================
    // COMPOSITION: SPECIALIZED HANDLERS
    // =============================================================================
    // Each handler encapsulates the business logic for a specific interface type
    
    TopicHandler topic_handler_;      ///< Handles topic publish/subscribe operations
    ServiceHandler service_handler_;  ///< Handles service server/client operations
    ActionHandler action_handler_;    ///< Handles action server/client operations
    ParameterHandler parameter_handler_; ///< Handles runtime parameter changes
};

}
