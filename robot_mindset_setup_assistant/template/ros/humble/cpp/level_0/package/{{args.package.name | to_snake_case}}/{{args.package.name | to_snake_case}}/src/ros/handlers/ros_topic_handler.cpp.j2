#include "ros/handlers/ros_topic_handler.hpp"

#include <utility>
#include <functional>

namespace {{ args.package.name |to_snake_case}} {

RosTopicHandler::RosTopicHandler(rclcpp::Node* node)
: InterfaceTopicHandler(node) {}

void RosTopicHandler::initialize() {
    auto qos = rclcpp::QoS(rclcpp::KeepLast(10));
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
    {%- if interface.direction == "out" %}
    pub_{{ interface.name|to_snake_case }}_ =
        node_->create_publisher<{{ lu.ros_data_type }}>("{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}", qos);
    {%- elif interface.direction == "in" %}
    sub_{{ interface.name|to_snake_case }}_ =
        node_->create_subscription<{{ lu.ros_data_type }}>(
            "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}",
            qos,
            std::bind(&RosTopicHandler::internal_callback_{{ interface.name|to_snake_case }}, this, std::placeholders::_1));
    {%- endif %}
    {%- else %}
    // TODO: Provide implementation for {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
}

void RosTopicHandler::shutdown() {
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- if interface.direction == "out" %}
    pub_{{ interface.name|to_snake_case }}_.reset();
    {%- elif interface.direction == "in" %}
    sub_{{ interface.name|to_snake_case }}_.reset();
    {%- set cb = namespace(data = args.lookup.interfaces.msgs[interface.msgs]) %}
    callback_{{ interface.name|to_snake_case }}_ = nullptr;
    {%- endif %}
    {%- endif %}
{%- endfor %}
{%- endif %}
}

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type,
                       ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
void RosTopicHandler::publish_{{ interface.name|to_snake_case }}(
{%- for field in lu.cpp_data_type %}
        const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}) {
    if (!pub_{{ interface.name|to_snake_case }}_) {
        RCLCPP_WARN(node_->get_logger(), "Publisher for {{ interface.name }} not initialized");
        return;
    }
    {{ lu.ros_data_type }} msg;
{%- for field in lu.cpp_data_type %}
    msg.{{ field.name }} = {{ field.name }};
{%- endfor %}
    pub_{{ interface.name|to_snake_case }}_->publish(msg);
}
{%- endif %}

{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(data = args.lookup.interfaces.msgs[interface.msgs]) %}
void RosTopicHandler::set_{{ interface.name|to_snake_case }}_callback(
{%- if lu.data.cpp_data_type and lu.data.cpp_data_type|length > 0 %}
        std::function<void(
{%- for field in lu.data.cpp_data_type %}
            const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %})> callback) {
    callback_{{ interface.name|to_snake_case }}_ = std::move(callback);
}

void RosTopicHandler::internal_callback_{{ interface.name|to_snake_case }}(const {{ lu.data.ros_data_type }} & msg) {
    if (!callback_{{ interface.name|to_snake_case }}_) {
        RCLCPP_WARN(node_->get_logger(), "No callback registered for {{ interface.name }} subscriber");
        return;
    }
    callback_{{ interface.name|to_snake_case }}_(
{%- for field in lu.data.cpp_data_type %}
        msg.{{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %});
}
{%- else %}
        std::function<void()> callback) {
    callback_{{ interface.name|to_snake_case }}_ = std::move(callback);
}

void RosTopicHandler::internal_callback_{{ interface.name|to_snake_case }}(const {{ lu.data.ros_data_type }} & /*msg*/) {
    if (!callback_{{ interface.name|to_snake_case }}_) {
        RCLCPP_WARN(node_->get_logger(), "No callback registered for {{ interface.name }} subscriber");
        return;
    }
    callback_{{ interface.name|to_snake_case }}_();
}
{%- endif %}
{%- endif %}

{%- endfor %}
{%- endif %}

} // namespace {{ args.package.name |to_snake_case}}
