#include "{{ args.package.name |to_snake_case}}/handlers/topic_handler.hpp"

/**
 * @file topic_handler.cpp
 * @brief Implementation of topic handler for publish/subscribe operations
 */

namespace {{ args.package.name |to_snake_case}} {

TopicHandler::TopicHandler() {
    spdlog::debug("TopicHandler initialized");
}

// =============================================================================
// PUBLISHER METHODS
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
void TopicHandler::publish_{{ interface.name|to_snake_case }}(
{%- for field in lu.cpp_data_type %}
        const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}) {
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-publish-implementation
    spdlog::info("TopicHandler: Publishing to {{ interface.name }}");
    // TODO: Add your business logic for processing outgoing data here
    // This method is called when you want to publish data to the {{ interface.name }} topic
    
    // Example data processing:
    // // Process outgoing {{ interface.msgs }} data
{%- for field in lu.cpp_data_type %}
    // auto processed_{{ field.name }} = {{ field.name }};
{%- endfor %}
    // // Add your transformation/validation logic here
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-publish-implementation
    
    // Delegate to ROS layer for actual publishing
    if (pub_callback_{{ interface.name|to_snake_case }}_) {
        pub_callback_{{ interface.name|to_snake_case }}_(
{%- for field in lu.cpp_data_type %}
            {{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %});
    } else {
        spdlog::warn("TopicHandler: No publish callback registered for {{ interface.name }}");
    }
}

{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

// =============================================================================
// SUBSCRIBER CALLBACK METHODS
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
void TopicHandler::process_subscription_{{ interface.name|to_snake_case }}(
{%- for field in lu.cpp_data_type %}
        const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}) {
    spdlog::info("TopicHandler: Received message on {{ interface.name }}");

    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-subscription-implementation
    // TODO: Add your business logic for processing incoming {{ interface.msgs }} data here
    
    // Example processing:
    // // Validate and process incoming {{ interface.msgs }} data
{%- for field in lu.cpp_data_type %}
    spdlog::debug("\t{{ field.name }} = {}", {{ field.name }});
{%- endfor %}
    // // Add your custom processing logic here
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-subscription-implementation

    if (sub_callback_{{ interface.name|to_snake_case }}_) {
        sub_callback_{{ interface.name|to_snake_case }}_(
{%- for field in lu.cpp_data_type %}
            {{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %});
    } else {
        spdlog::debug("TopicHandler: No subscription callback registered for {{ interface.name }}");
    }
}

{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

// =============================================================================
// CALLBACK REGISTRATION
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
void TopicHandler::set_publish_callback_{{ interface.name|to_snake_case }}(
    std::function<void(
{%- for field in lu.cpp_data_type %}
        const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %})> callback) {
    pub_callback_{{ interface.name|to_snake_case }}_ = callback;
    spdlog::debug("TopicHandler: Publish callback registered for {{ interface.name }}");
}
{%- endif %}

{%- endif %}
{%- endfor %}
{%- endif %}

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
void TopicHandler::set_subscription_callback_{{ interface.name|to_snake_case }}(
    std::function<void(
{%- for field in lu.cpp_data_type %}
        const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %})> callback) {
    sub_callback_{{ interface.name|to_snake_case }}_ = std::move(callback);
    spdlog::debug("TopicHandler: Subscription callback registered for {{ interface.name }}");
}
{%- endif %}

{%- endif %}
{%- endfor %}
{%- endif %}

}  // namespace {{ args.package.name |to_snake_case}}