#include "ros/handlers/ros_action_handler.hpp"

#include <functional>
#include <utility>

{%- set server_actions = [] %}
{%- set client_actions = [] %}
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- set server_actions = args.ros.interfaces | selectattr('type', 'equalto', 'action') | selectattr('direction', 'equalto', 'out') | list %}
{%- set client_actions = args.ros.interfaces | selectattr('type', 'equalto', 'action') | selectattr('direction', 'equalto', 'in') | list %}
{%- endif %}

namespace {{ args.package.name |to_snake_case}} {

RosActionHandler::RosActionHandler(rclcpp::Node* node)
: InterfaceActionHandler(node) {}

void RosActionHandler::initialize() {
    RCLCPP_DEBUG(node_->get_logger(), "Initializing action handler");
    if (!node_) {
        RCLCPP_ERROR(rclcpp::get_logger("RosActionHandler"), "Cannot initialize action handler without a valid node");
        return;
    }

{%- if server_actions or client_actions %}
    auto node_base = node_->get_node_base_interface();
    auto node_logging = node_->get_node_logging_interface();
    auto node_waitables = node_->get_node_waitables_interface();
{%- if client_actions %}
    auto node_graph = node_->get_node_graph_interface();
{%- endif %}
{%- if server_actions %}
    auto node_clock = node_->get_node_clock_interface();
{%- endif %}

{%- if server_actions %}
    if (!node_base || !node_clock || !node_logging || !node_waitables) {
        RCLCPP_ERROR(node_->get_logger(), "Missing node interfaces required to create action servers");
        return;
    }
{%- endif %}
{%- if client_actions and not server_actions %}
    if (!node_base || !node_graph || !node_logging || !node_waitables) {
        RCLCPP_ERROR(node_->get_logger(), "Missing node interfaces required to create action clients");
        return;
    }
{%- elif client_actions and server_actions %}
    if (!node_graph) {
        RCLCPP_ERROR(node_->get_logger(), "Missing node graph interface required to create action clients");
        return;
    }
{%- endif %}

{%- for interface in server_actions %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
{%- set identifier = interface.name|to_snake_case %}
    if (!action_server_{{ identifier }}_) {
        action_server_{{ identifier }}_ = rclcpp_action::create_server<{{ lu.ros_data_type }}>(
            node_base,
            node_clock,
            node_logging,
            node_waitables,
            "{{ interface.name }}",
            [this](const rclcpp_action::GoalUUID & uuid,
                   std::shared_ptr<const {{ lu.ros_data_type }}::Goal> goal) {
                return internal_handle_goal_{{ identifier }}(uuid, goal);
            },
            [this](const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ lu.ros_data_type }}>> goal_handle) {
                return internal_handle_cancel_{{ identifier }}(goal_handle);
            },
            [this](const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ lu.ros_data_type }}>> goal_handle) {
                internal_handle_accepted_{{ identifier }}(goal_handle);
            });
        if (!action_server_{{ identifier }}_) {
            RCLCPP_ERROR(node_->get_logger(), "Failed to create action server for {{ interface.name }}");
        }
    }
{%- endif %}
{%- endfor %}

{%- for interface in client_actions %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
{%- set identifier = interface.name|to_snake_case %}
    if (!action_client_{{ identifier }}_) {
        action_client_{{ identifier }}_ = rclcpp_action::create_client<{{ lu.ros_data_type }}>(
            node_base,
            node_graph,
            node_logging,
            node_waitables,
            "{{ interface.name }}");
        if (!action_client_{{ identifier }}_) {
            RCLCPP_ERROR(node_->get_logger(), "Failed to create action client for {{ interface.name }}");
        }
    }
{%- endif %}
{%- endfor %}
{%- endif %}
}

void RosActionHandler::shutdown() {
    RCLCPP_DEBUG(node_->get_logger(), "Shutting down action handler");
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" %}
    {%- if interface.direction == "in" %}
    action_client_{{ interface.name|to_snake_case }}_.reset();
    goal_handle_{{ interface.name|to_snake_case }}_.reset();
    {%- elif interface.direction == "out" %}
    action_server_{{ interface.name|to_snake_case }}_.reset();
    goal_callback_{{ interface.name|to_snake_case }}_ = nullptr;
    cancel_callback_{{ interface.name|to_snake_case }}_ = nullptr;
    accepted_callback_{{ interface.name|to_snake_case }}_ = nullptr;
    {%- endif %}
{%- endfor %}
{%- endif %}
}

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type,
                       ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
bool RosActionHandler::send_goal_{{ interface.name|to_snake_case }}(
{%- if lu.cpp_data_type.goal is defined %}
{%- for field in lu.cpp_data_type.goal %}
        const {{ field.type }} &goal_{{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %}
{%- else %}
        const {{ lu.ros_data_type }}::Goal & /*goal*/
{%- endif %}) {
{%- if lu.cpp_data_type.goal is defined %}
{%- for field in lu.cpp_data_type.goal %}
    (void)goal_{{ field.name }};
{%- endfor %}
{%- endif %}
    RCLCPP_WARN(node_->get_logger(), "Action client for {{ interface.name }} not fully implemented");
    return false;
}

bool RosActionHandler::cancel_goal_{{ interface.name|to_snake_case }}() {
    RCLCPP_WARN(node_->get_logger(), "Action client cancel for {{ interface.name }} not implemented");
    return false;
}
{%- endif %}

{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
void RosActionHandler::set_{{ interface.name|to_snake_case }}_callbacks(
        std::function<rclcpp_action::GoalResponse(const rclcpp_action::GoalUUID &,
                                                 std::shared_ptr<const {{ lu.ros_data_type }}::Goal>)> goal_callback,
        std::function<rclcpp_action::CancelResponse(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ lu.ros_data_type }}>>)> cancel_callback,
        std::function<void(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ lu.ros_data_type }}>>)> accepted_callback) {
    goal_callback_{{ interface.name|to_snake_case }}_ = std::move(goal_callback);
    cancel_callback_{{ interface.name|to_snake_case }}_ = std::move(cancel_callback);
    accepted_callback_{{ interface.name|to_snake_case }}_ = std::move(accepted_callback);
}

rclcpp_action::GoalResponse RosActionHandler::internal_handle_goal_{{ interface.name|to_snake_case }}(
        const rclcpp_action::GoalUUID & uuid,
        std::shared_ptr<const {{ lu.ros_data_type }}::Goal> goal) {
    if (goal_callback_{{ interface.name|to_snake_case }}_) {
        return goal_callback_{{ interface.name|to_snake_case }}_(uuid, goal);
    }
    RCLCPP_WARN(node_->get_logger(), "No goal callback registered for {{ interface.name }}");
    return rclcpp_action::GoalResponse::REJECT;
}

rclcpp_action::CancelResponse RosActionHandler::internal_handle_cancel_{{ interface.name|to_snake_case }}(
        const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ lu.ros_data_type }}>> goal_handle) {
    if (cancel_callback_{{ interface.name|to_snake_case }}_) {
        return cancel_callback_{{ interface.name|to_snake_case }}_(goal_handle);
    }
    RCLCPP_WARN(node_->get_logger(), "No cancel callback registered for {{ interface.name }}");
    return rclcpp_action::CancelResponse::REJECT;
}

void RosActionHandler::internal_handle_accepted_{{ interface.name|to_snake_case }}(
        const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ lu.ros_data_type }}>> goal_handle) {
    if (accepted_callback_{{ interface.name|to_snake_case }}_) {
        accepted_callback_{{ interface.name|to_snake_case }}_(goal_handle);
    } else {
        RCLCPP_WARN(node_->get_logger(), "No accepted callback registered for {{ interface.name }}");
    }
}
{%- endif %}

{%- endfor %}
{%- endif %}

} // namespace {{ args.package.name |to_snake_case}}
