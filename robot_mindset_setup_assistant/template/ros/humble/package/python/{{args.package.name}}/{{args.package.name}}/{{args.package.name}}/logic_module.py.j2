"""Logic module for {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}."""

from __future__ import annotations

import sys
from typing import Any

from loguru import logger
from {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}.input_interface import LogicModuleInputInterface
from {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}.output_interface import LogicModuleOutputInterface


class LogicModule(LogicModuleInputInterface, LogicModuleOutputInterface):
    """Application logic that stays independent from ROS plumbing."""

    def __init__(self) -> None:
        super().__init__()
        self._configure_logger('INFO')

    def _configure_logger(self, level: str) -> None:
        """Reset loguru sinks and apply the requested level."""
        logger.remove()
        logger.add(sys.stderr, level=level.upper())

    def set_logger_level(self, level: str) -> None:
        """Update runtime logging verbosity."""
        self._configure_logger(level)
        logger.info("Log level set to {}", level.upper())

    # ------------------------------------------------------------------
    # Convenience sample functions mirroring the C++ template behaviour
    # ------------------------------------------------------------------
    def greet(self, name: str) -> str:
        """Return a friendly greeting."""
        message = f"Hello, {name}! This is a non-ROS module."
        logger.info(message)
        return message

    def spdlog_test(self, number: float) -> None:
        """Emit a couple of formatted log statements for demonstration."""
        logger.info("Python logic module reporting number: {:.2f}", number)
        logger.warning("Zero padded integer: {:08d}", 12)
        logger.success("Binary output: {:b}", 42)

    # ------------------------------------------------------------------
    # Business logic methods - these can call inherited interface methods
    # ------------------------------------------------------------------
    def example_business_logic(self) -> None:
        """Example method showing how to use the output interfaces."""
        # JINJA-BEGIN:business-logic-example
        logger.info("Executing business logic...")
        
        # Example: publish to all output topics
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
        # Publish to {{ interface.name }}
        self._publish_{{ identifier }}(
{%- for field in lu.cpp_data_type %}
{%- if field.type in ['std::string', 'string'] %}
            {{ field.name }}="Hello from business logic!",
{%- elif field.type in ['double', 'float64'] %}
            {{ field.name }}=42.0,
{%- elif field.type in ['int', 'int32', 'int64'] %}
            {{ field.name }}=42,
{%- elif field.type in ['bool', 'boolean'] %}
            {{ field.name }}=True,
{%- else %}
            {{ field.name }}="default_value",
{%- endif %}
{%- endfor %}
        )
{%- endif %}
{%- endfor %}

        # Example: call all service clients
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
        # Call service {{ interface.name }}
        result = self._call_service_{{ identifier }}(
{%- for field in lu.cpp_data_type.req %}
{%- if field.type in ['std::string', 'string'] %}
            {{ field.name }}="service_request",
{%- elif field.type in ['double', 'float64'] %}
            {{ field.name }}=1.0,
{%- elif field.type in ['int', 'int32', 'int64'] %}
            {{ field.name }}=1,
{%- elif field.type in ['bool', 'boolean'] %}
            {{ field.name }}=True,
{%- else %}
            {{ field.name }}="default",
{%- endif %}
{%- endfor %}
        )
        logger.info("Service {{ interface.name }} result: {}", result)
{%- endif %}
{%- endfor %}
{%- else %}
        logger.info("No interfaces defined - pure business logic only")
{%- endif %}
        # JINJA-END:business-logic-example

    # ------------------------------------------------------------------
    # Override input interface methods with business logic
    # ------------------------------------------------------------------
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    def process_sub_{{ identifier }}(
        self,
{%- for field in lu.cpp_data_type %}
        msg_{{ field.name }}: Any,
{%- endfor %}
    ) -> None:
        """Handle inbound topic with business logic: {{ interface.description }}."""
        # JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-topic-subscriber
        # Call parent implementation for logging
        super().process_sub_{{ identifier }}(
{%- for field in lu.cpp_data_type %}
            msg_{{ field.name }},
{%- endfor %}
        )
        
        # Add your business logic here
        logger.info("Processing {{ interface.name }} in business logic")
        # Example: trigger business logic based on input
        self.example_business_logic()
        # JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-topic-subscriber

{%- endif %}
{%- endfor %}

{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    def process_srv_{{ identifier }}(
        self,
{%- for field in lu.cpp_data_type.req %}
        req_{{ field.name }}: Any,
{%- endfor %}
    ) -> dict[str, Any]:
        """Handle service server request with business logic: {{ interface.description }}."""
        # JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-service-server
        # Call parent implementation for logging  
        response = super().process_srv_{{ identifier }}(
{%- for field in lu.cpp_data_type.req %}
            req_{{ field.name }},
{%- endfor %}
        )
        
        # Add your business logic here
        logger.info("Processing service {{ interface.name }} in business logic")
        
        # Example: modify response based on business logic
{%- for field in lu.cpp_data_type.res %}
        if "{{ field.name }}" in response:
            # Customize response based on business requirements
            response["{{ field.name }}"] = True if "{{ field.type }}" in ("bool", "boolean") else "Business Logic Response"
{%- endfor %}
        # JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}-service-server
        
        return response

{%- endif %}
{%- endfor %}
{%- endif %}
