"""Logic module for {{ args.package.name }}."""

from __future__ import annotations

import sys
from typing import Any, Callable, Optional

from loguru import logger


class LogicModule:
    """Application logic that stays independent from ROS plumbing."""

    def __init__(self) -> None:
        self._configure_logger('INFO')
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
        self._pub_callback_{{ identifier }}: Optional[Callable[..., None]] = None
{%- endfor %}
{%- endif %}

    def _configure_logger(self, level: str) -> None:
        """Reset loguru sinks and apply the requested level."""
        logger.remove()
        logger.add(sys.stderr, level=level.upper())

    def set_logger_level(self, level: str) -> None:
        """Update runtime logging verbosity."""
        self._configure_logger(level)
        logger.info("Log level set to {}", level.upper())

    # ------------------------------------------------------------------
    # Convenience sample functions mirroring the C++ template behaviour
    # ------------------------------------------------------------------
    def greet(self, name: str) -> str:
        """Return a friendly greeting."""
        message = f"Hello, {name}! This is a non-ROS module."
        logger.info(message)
        return message

    def spdlog_test(self, number: float) -> None:
        """Emit a couple of formatted log statements for demonstration."""
        logger.info("Python logic module reporting number: {:.2f}", number)
        logger.warning("Zero padded integer: {:08d}", 12)
        logger.success("Binary output: {:b}", 42)

    # ------------------------------------------------------------------
    # Callbacks invoked from ROS adapters
    # ------------------------------------------------------------------
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
    def process_sub_{{ identifier }}(self, msg: Any) -> None:
        """Handle inbound topic: {{ interface.description }}."""
        logger.debug("[topic: {{ interface.name }}] received %s", msg)

{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
    def process_srv_{{ identifier }}(self, request: Any, response: Any) -> Any:
        """Handle service server request: {{ interface.description }}."""
        logger.debug("[service: {{ interface.name }}] request=%s", request)
        # Default implementation just acknowledges the call.
{%- if interface.msgs in args.lookup.interfaces.msgs and args.lookup.interfaces.msgs[interface.msgs].cpp_data_type.res %}
{%- for field in args.lookup.interfaces.msgs[interface.msgs].cpp_data_type.res %}
        if hasattr(response, '{{ field.name }}'):
            setattr(response, '{{ field.name }}', getattr(response, '{{ field.name }}', None) or (True if '{{ field.type }}' in ('bool', 'boolean') else 'OK'))
{%- endfor %}
{%- endif %}
        return response

{%- endfor %}
{%- endif %}

    # ------------------------------------------------------------------
    # Hooks for outbound communication (publishers, clients, actions)
    # ------------------------------------------------------------------
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
    def set_pub_callback_{{ identifier }}(self, callback: Callable[..., None]) -> None:
        """Register ROS publisher bridge for {{ interface.description }}."""
        self._pub_callback_{{ identifier }} = callback

    def interface_pub_{{ identifier }}(self, **fields: Any) -> None:
        """Emit data on outbound topic {{ interface.name }}."""
        if self._pub_callback_{{ identifier }} is None:
            logger.warning("No publisher callback registered for {{ interface.name }}")
            return
        self._pub_callback_{{ identifier }}(**fields)

{%- endfor %}
{%- endif %}
