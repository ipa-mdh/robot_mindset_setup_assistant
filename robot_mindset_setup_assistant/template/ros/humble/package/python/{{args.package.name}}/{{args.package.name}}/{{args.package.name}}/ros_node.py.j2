"""ROS 2 node bridging {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} logic with rclpy."""

from __future__ import annotations

from typing import Any, Optional

import rclpy
from rclpy.node import Node
from loguru import logger

from {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}.logic_module import LogicModule

{%- set ns = namespace(imports=[]) %}
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- if parts|length >= 3 %}
{%- set module_path = parts[0] + '.' + parts[1] %}
{%- set class_name = parts[2].replace('_', ' ') | title | replace(' ', '') %}
{%- set import_line = module_path + '|' + class_name %}
{%- if import_line not in ns.imports %}
{%- set _ = ns.imports.append(import_line) %}
{%- endif %}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- for entry in ns.imports %}
{%- set module, cls = entry.split('|') %}
from {{ module }} import {{ cls }}
{%- endfor %}


class ROSNode(Node):
    """ROS-aware adapter around the LogicModule."""

    def __init__(self) -> None:
        super().__init__('{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}')
        self.logic_module = LogicModule()
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
        self._pub_{{ identifier }} = None  # type: ignore[assignment]
{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
        self._client_{{ identifier }} = None  # type: ignore[assignment]
{%- endfor %}
{%- endif %}
        self._init_parameters()
        self._init_ros_interface_subscribers()
        self._init_ros_interface_publishers()
        self._init_ros_interface_services()
        self._init_ros_interface_clients()
        self._init_logic_module()

    # ------------------------------------------------------------------
    # Initialisation helpers
    # ------------------------------------------------------------------
    def _init_parameters(self) -> None:
        """Initialize ROS2 parameters based on interface definitions."""
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
{%- for field in lu.cpp_data_type %}
        # {{ interface.description }}
        {%- if field.type == "std::string" %}
        self.declare_parameter('{{ interface.name }}', 'INFO')
        {%- elif field.type == "double" %}
        self.declare_parameter('{{ interface.name }}', 0.0)
        {%- elif field.type == "int" or field.type == "int32_t" %}
        self.declare_parameter('{{ interface.name }}', 0)
        {%- elif field.type == "bool" %}
        self.declare_parameter('{{ interface.name }}', False)
        {%- else %}
        self.declare_parameter('{{ interface.name }}', '')
        {%- endif %}
        self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param = self.get_parameter('{{ interface.name }}').value
        logger.info(f"Declared parameter '{{ interface.name }}' with value: {self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param}")
{%- endfor %}
{%- else %}
        # {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown parameter interface.msgs: {{ interface.msgs }}
{%- endif %}
{%- endfor %}
{%- else %}
        # No parameter interfaces defined, using default log_level parameter
        self.declare_parameter('log_level', 'INFO')
        self.log_level_param = self.get_parameter('log_level').value
        logger.info(f"Declared default parameter 'log_level' with value: {self.log_level_param}")
{%- endif %}

        # Set up parameter callback for runtime updates
        self.add_on_set_parameters_callback(self._parameter_callback)
        
        # Apply initial parameter values to logic module
        self._apply_parameters_to_logic_module()

    def _init_ros_interface_subscribers(self) -> None:
        self._subscriptions = []
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- set cls = parts[2].replace('_', ' ') | title | replace(' ', '') %}
        subscription = self.create_subscription(
            {{ cls }},
            '{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}',
            self._callback_sub_{{ identifier }},
            10,
        )
        self._subscriptions.append(subscription)
        logger.debug(f'Created subscriber for { interface.name }')
{%- else %}
        logger.warning(f'Interface { interface.name } not in lookup table, skipping subscriber')
{%- endif %}
{%- endfor %}
{%- endif %}

    def _init_ros_interface_publishers(self) -> None:
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- set cls = parts[2].replace('_', ' ') | title | replace(' ', '') %}
        self._pub_{{ identifier }} = self.create_publisher(
            {{ cls }},
            '{{ interface.name }}',
            10,
        )
        logger.debug(f'Created publisher for { interface.name }')
{%- else %}
        logger.warning(f'Interface { interface.name } not in lookup table, skipping publisher')
{%- endif %}
{%- endfor %}
{%- endif %}

    def _init_ros_interface_services(self) -> None:
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- set cls = parts[2].replace('_', ' ') | title | replace(' ', '') %}
        self.create_service(
            {{ cls }},
            '{{ interface.name }}',
            self._callback_srv_{{ identifier }},
        )
        logger.debug(f'Created service server for { interface.name }')
{%- else %}
        logger.warning(f'Interface { interface.name } not in lookup table, skipping service server')
{%- endif %}
{%- endfor %}
{%- endif %}

    def _init_ros_interface_clients(self) -> None:
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- set cls = parts[2].replace('_', ' ') | title | replace(' ', '') %}
        self._client_{{ identifier }} = self.create_client(
            {{ cls }},
            '{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}',
        )
        while not self._client_{{ identifier }}.wait_for_service(timeout_sec=1.0):
            self.get_logger().info(f'Service { interface.name } not available, waiting again...')
        logger.debug(f'Created service client for { interface.name }')
{%- else %}
        logger.warning(f'Interface { interface.name } not in lookup table, skipping service client')
{%- endif %}
{%- endfor %}
{%- endif %}

    def _init_logic_module(self) -> None:
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
        self.logic_module.set_pub_callback_{{ identifier }}(self._interface_pub_{{ identifier }})
{%- endif %}
{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
        self.logic_module.set_srv_client_{{ identifier }}(self._interface_srv_{{ identifier }})
{%- endif %}
{%- endfor %}
{%- endif %}

    # ------------------------------------------------------------------
    # Parameter handling methods
    # ------------------------------------------------------------------
    def _parameter_callback(self, params):
        """Handle parameter updates at runtime."""
        from rclpy.parameter import Parameter
        
        successful = True
        reason = ""
        
        for param in params:
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
{%- for field in lu.cpp_data_type %}
            if param.name == '{{ interface.name }}':
                {%- if field.type == "std::string" %}
                if param.type_ == Parameter.Type.STRING:
                    self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param = param.value
                    logger.info(f"Parameter '{{ interface.name }}' updated to: {param.value}")
                else:
                    successful = False
                    reason = f"Parameter '{{ interface.name }}' must be a string"
                    logger.error(reason)
                {%- elif field.type == "double" %}
                if param.type_ == Parameter.Type.DOUBLE:
                    self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param = param.value
                    logger.info(f"Parameter '{{ interface.name }}' updated to: {param.value}")
                else:
                    successful = False
                    reason = f"Parameter '{{ interface.name }}' must be a double"
                    logger.error(reason)
                {%- elif field.type == "int" or field.type == "int32_t" %}
                if param.type_ == Parameter.Type.INTEGER:
                    self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param = param.value
                    logger.info(f"Parameter '{{ interface.name }}' updated to: {param.value}")
                else:
                    successful = False
                    reason = f"Parameter '{{ interface.name }}' must be an integer"
                    logger.error(reason)
                {%- elif field.type == "bool" %}
                if param.type_ == Parameter.Type.BOOL:
                    self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param = param.value
                    logger.info(f"Parameter '{{ interface.name }}' updated to: {param.value}")
                else:
                    successful = False
                    reason = f"Parameter '{{ interface.name }}' must be a boolean"
                    logger.error(reason)
                {%- else %}
                if param.type_ == Parameter.Type.STRING:
                    self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param = param.value
                    logger.info(f"Parameter '{{ interface.name }}' updated to: {param.value}")
                else:
                    successful = False
                    reason = f"Parameter '{{ interface.name }}' must be a string"
                    logger.error(reason)
                {%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- else %}
            if param.name == 'log_level':
                if param.type_ == Parameter.Type.STRING:
                    self.log_level_param = param.value
                    logger.info(f"Parameter 'log_level' updated to: {param.value}")
                else:
                    successful = False
                    reason = "Parameter 'log_level' must be a string"
                    logger.error(reason)
{%- endif %}
        
        if successful:
            # Apply parameter changes to logic module
            self._apply_parameters_to_logic_module()
        
        from rcl_interfaces.msg import SetParametersResult
        return SetParametersResult(successful=successful, reason=reason)
    
    def _apply_parameters_to_logic_module(self) -> None:
        """Apply current parameter values to the logic module."""
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
        {%- if interface.name == "log_level" %}
        # Set log level in logic module
        self.logic_module.set_logger_level(str(self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param))
        {%- else %}
        # Apply {{ interface.name }} parameter to logic module
        # TODO: Implement parameter application for {{ interface.name }}
        # self.logic_module.set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(self.{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_param)
        {%- endif %}
{%- endfor %}
{%- else %}
        # Apply default log_level parameter to logic module
        self.logic_module.set_logger_level(str(self.log_level_param))
{%- endif %}

    # ------------------------------------------------------------------
    # Callbacks bridging ROS <-> logic module
    # ------------------------------------------------------------------
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
    def _callback_sub_{{ identifier }}(self, msg: Any) -> None:
        logger.debug(f'Forwarding message from { interface.name } to logic module')
        self.logic_module.process_sub_{{ identifier }}(msg)

{%- endif %}
{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
    def _callback_srv_{{ identifier }}(self, request: Any, response: Any) -> Any:
        logger.debug(f'Forwarding service call { interface.name } to logic module')
        result = self.logic_module.process_srv_{{ identifier }}(request, response)
        return result if result is not None else response

{%- endif %}
{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- set cls = parts[2].replace('_', ' ') | title | replace(' ', '') %}
{%- set field_defs = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type %}
    def _interface_pub_{{ identifier }}(self, **payload: Any) -> None:
        if self._pub_{{ identifier }} is None:
            logger.error(f'Publisher for { interface.name } not initialised')
            return
        message = payload.get('message')
        if message is None:
            message = {{ cls }}()
{%- if field_defs %}
{%- for field in field_defs %}
            if '{{ field.name }}' in payload:
                setattr(message, '{{ field.name }}', payload['{{ field.name }}'])
{%- endfor %}
{%- endif %}
        self._pub_{{ identifier }}.publish(message)
        logger.debug(f'Published message on { interface.name }')

{%- endif %}
{%- endfor %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set identifier = interface.name|regex_replace('[^A-Za-z0-9]', '_') %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- set cls = parts[2].replace('_', ' ') | title | replace(' ', '') %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    def _interface_srv_{{ identifier }}(self, **payload: Any):
        if self._client_{{ identifier }} is None:
            logger.error(f'Service client for { interface.name } not initialised')
            return None
        request = {{ cls }}.Request()
{%- for field in lu.cpp_data_type.req %}
        if '{{ field.name }}' in payload:
            setattr(request, '{{ field.name }}', payload['{{ field.name }}'])
        else:
            logger.debug(f'Missing field { field.name } for service { interface.name }, using default')
{%- endfor %}
        future = self._client_{{ identifier }}.call_async(request)
        logger.debug(f'Dispatched async request on { interface.name }')
        return future

{%- endif %}
{%- endfor %}
{%- endif %}


def main(args: Optional[list[str]] = None) -> None:
    """Entry point for console_scripts."""
    rclpy.init(args=args)
    node = ROSNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        logger.info('Shutting down {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} node')
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
