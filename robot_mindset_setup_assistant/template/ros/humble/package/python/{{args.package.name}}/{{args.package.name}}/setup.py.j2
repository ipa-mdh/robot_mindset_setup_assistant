import os
from glob import glob
from setuptools import setup

package_name = '{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}'


def get_data_files_with_structure(directory, prefix):
    """Get data files preserving directory structure."""
    data_files = []
    if os.path.exists(directory):
        for root, dirs, files in os.walk(directory):
            if files:
                # Calculate relative path from the directory
                rel_dir = os.path.relpath(root, directory)
                if rel_dir == '.':
                    target_dir = f'share/{package_name}/{prefix}'
                else:
                    target_dir = f'share/{package_name}/{prefix}/{rel_dir}'
                
                file_paths = [os.path.join(root, f) for f in files]
                data_files.append((target_dir, file_paths))
    return data_files

# Collect all data files
data_files = [
    ('share/ament_index/resource_index/packages', ['resource/' + package_name]),
    ('share/' + package_name, ['package.xml']),
]

# Add launch files
launch_files = glob('launch/*.py')
if launch_files:
    data_files.append(('share/' + package_name + '/launch', launch_files))

# Add example files with directory structure
data_files.extend(get_data_files_with_structure('example', 'example'))

# Add resource files with directory structure  
data_files.extend(get_data_files_with_structure('resource', 'resource'))

setup(
    name=package_name,
    version='{{ args.package.version }}',
    packages=[package_name],
    data_files=data_files,
    install_requires=[
        'setuptools',
        'loguru',
{%- if args.package is defined and args.package.dependencies is defined and args.package.dependencies.python is defined %}
{%- for dep in args.package.dependencies.python %}
        '{{ dep }}',
{%- endfor %}
{%- endif %}
    ],
    zip_safe=True,
    maintainer='{{ args.package.maintainer }}',
    maintainer_email='{{ args.package.maintainer_email }}',
    description='{{ args.package.description }}',
    license='{{ args.package.license.value }}',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            '{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}_node = {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}.ros_node:main',
        ],
    },
)
