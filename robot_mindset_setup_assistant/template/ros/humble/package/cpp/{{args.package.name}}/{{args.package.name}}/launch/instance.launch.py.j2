# -----------------------------------------------------------------------------
# This file was automatically generated by robot_mindset_setup_assistant.
# Do not edit this file manually as your changes may be overwritten.
# If you want to customize behavior, edit the relevant templates or
# custom sections instead.
# -----------------------------------------------------------------------------

import os
from pathlib import Path
import yaml
from loguru import logger

import launch
import launch_ros
from ament_index_python.packages import get_package_share_directory
from moveit_configs_utils import MoveItConfigsBuilder

def generate_standard_launch_description():
    """
    Generate a standard launch description.
    """
    logger.info("---- {{ args.package.name }}/instance.launch -----")
    # Set default launch arguments
    namespace = launch.substitutions.LaunchConfiguration('namespace', default='{{ args.package.name }}')
    simulation = launch.substitutions.LaunchConfiguration('simulation', default='true')
    simulation_with_gazebo = launch.substitutions.LaunchConfiguration('simulation_with_gazebo', default='false')
    gazebo_classic = launch.substitutions.LaunchConfiguration('gazebo_classic', default='true')

    # get path of package
    package_path = Path(get_package_share_directory('{{ args.package.name }}'))

    default_instance_config = package_path / 'example' / 'instance_config' / '{{ args.package.name }}'
    instance_config_folder = launch.substitutions.LaunchConfiguration('instance_config_folder', default=str(default_instance_config))

    return [
        launch.actions.DeclareLaunchArgument('namespace', default_value=namespace),
        launch.actions.DeclareLaunchArgument('simulation', default_value=simulation),
        launch.actions.DeclareLaunchArgument('simulation_with_gazebo', default_value=simulation_with_gazebo),
        launch.actions.DeclareLaunchArgument('gazebo_classic', default_value=gazebo_classic),
        launch.actions.DeclareLaunchArgument('instance_config_folder', default_value=instance_config_folder),
    ]

def load_yaml(file: Path):
    config = {}
    if file.exists():
        with open(file, 'r') as f:
            config = yaml.safe_load(f)
    else:
        logger.warning(f"Config file {file} does not exist. Using empty config.")
    return config

def get_config(config_file: Path):
    config = load_yaml(config_file)
    
    # if key config is not in config
    if 'config' not in config:
        logger.warning(f"Key 'config' not found in config file. Using empty config.")
        return {}
    else:
        return config['config']

def generate_custom_launch_description(context, *args, **kwargs):
    """
    Generate a custom launch description.
    """
    namespace = launch.substitutions.LaunchConfiguration('namespace').perform(context)
    simulation = launch.substitutions.LaunchConfiguration('simulation').perform(context)
    simulation_with_gazebo = launch.substitutions.LaunchConfiguration('simulation_with_gazebo').perform(context)
    gazebo_classic = launch.substitutions.LaunchConfiguration('gazebo_classic').perform(context)

    instance_config_folder = Path(launch.substitutions.LaunchConfiguration('instance_config_folder').perform(context))

    gz = simulation and simulation_with_gazebo

    launch_description = []

    config = get_config(instance_config_folder / "config.yaml")
    logger.info(f"[{namespace}] instance config: {config}")
    # --------------------------------------------
    #             package related code
    # --------------------------------------------

    # ==========================================================================
    #      Place your package-related launch actions
    #      between “JINJA-BEGIN:tag”
    #          and “JINJA-END:tag”.
    # ==========================================================================
    #   The instance configuration folder can be accessed via:
    #     logger.info("Instance config folder: {instance_config_folder}")
    #   The standard configs can be accessed as follows:
    #     logger.info(f'Instance log level: {config.get('log_level', 'INFO')}')
    # ==========================================================================
    # JINJA-BEGIN:customer-section


    # JINJA-END:customer-section
    # --------------------------------------------
    #  ~~~~~~~~~~ package related code ~~~~~~~~~~
    # --------------------------------------------

    return launch_description

def generate_launch_description():
    buffer = []
    buffer = generate_standard_launch_description()
    buffer.append(launch.actions.OpaqueFunction(function=generate_custom_launch_description))
    return launch.LaunchDescription(buffer)

if __name__ == '__main__':
    generate_launch_description()