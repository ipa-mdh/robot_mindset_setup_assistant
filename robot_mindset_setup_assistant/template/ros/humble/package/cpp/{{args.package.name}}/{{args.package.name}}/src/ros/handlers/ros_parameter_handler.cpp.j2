#include "ros/handlers/ros_parameter_handler.hpp"

#include <cstdint>
#include <utility>

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

RosParameterHandler::RosParameterHandler(rclcpp::Node* node)
: InterfaceParameterHandler(node) {}

void RosParameterHandler::initialize() {
    RCLCPP_DEBUG(node_->get_logger(), "Initializing parameter handler");
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
{%- for field in lu.cpp_data_type %}
    if (!node_->has_parameter("{{ interface.name }}")) {
    {%- if field.type == "std::string" %}
        param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = node_->declare_parameter<std::string>("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- elif field.type == "double" %}
        param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = node_->declare_parameter<double>("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- elif field.type == "int" or field.type == "int32_t" %}
        param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = static_cast<int>(node_->declare_parameter<int64_t>("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_));
    {%- elif field.type == "bool" %}
        param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = node_->declare_parameter<bool>("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- else %}
        param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = node_->declare_parameter<std::string>("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- endif %}
    } else {
        const auto current_param = node_->get_parameter("{{ interface.name }}");
    {%- if field.type == "std::string" %}
        if (current_param.get_type() == rclcpp::ParameterType::PARAMETER_STRING) {
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = current_param.as_string();
        }
    {%- elif field.type == "double" %}
        if (current_param.get_type() == rclcpp::ParameterType::PARAMETER_DOUBLE) {
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = current_param.as_double();
        }
    {%- elif field.type == "int" or field.type == "int32_t" %}
        if (current_param.get_type() == rclcpp::ParameterType::PARAMETER_INTEGER) {
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = static_cast<int>(current_param.as_int());
        }
    {%- elif field.type == "bool" %}
        if (current_param.get_type() == rclcpp::ParameterType::PARAMETER_BOOL) {
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = current_param.as_bool();
        }
    {%- else %}
        if (current_param.get_type() == rclcpp::ParameterType::PARAMETER_STRING) {
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = current_param.as_string();
        } else {
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = current_param.value_to_string();
        }
    {%- endif %}
    }
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}

    if (!param_callback_handle_) {
        param_callback_handle_ = node_->add_on_set_parameters_callback(
            [this](const std::vector<rclcpp::Parameter> &parameters) {
                return this->parameters_callback(parameters);
            });
    }

    apply_parameters_to_logic_module();
}

void RosParameterHandler::shutdown() {
    RCLCPP_DEBUG(node_->get_logger(), "Shutting down parameter handler");
    if (param_callback_handle_) {
        node_->remove_on_set_parameters_callback(param_callback_handle_.get());
        param_callback_handle_.reset();
    }
}

std::vector<RosParam> RosParameterHandler::get_private_parameters() {
    std::vector<RosParam> private_params;
    const auto parameter_names = node_->list_parameters({}, 0);

    for (const auto &param_name : parameter_names.names) {
        RosParam entry;
        entry.name = param_name;
        entry.value = node_->get_parameter(param_name).value_to_string();
        private_params.emplace_back(std::move(entry));
    }

    return private_params;
}

bool RosParameterHandler::set_private_parameter(const std::string& param_name, const std::string& param_value) {
    try {
        auto result = node_->set_parameter(rclcpp::Parameter(param_name, param_value));
        if (!result.successful) {
            RCLCPP_WARN(node_->get_logger(), "Failed to set parameter '%s': %s", param_name.c_str(), result.reason.c_str());
        }
        return result.successful;
    } catch (const std::exception& ex) {
        RCLCPP_ERROR(node_->get_logger(), "Exception while setting parameter '%s': %s", param_name.c_str(), ex.what());
        return false;
    }
}

void RosParameterHandler::set_parameter_callback(
        std::function<rcl_interfaces::msg::SetParametersResult(const std::vector<rclcpp::Parameter> &)> callback) {
    parameter_callback_ = std::move(callback);
}

void RosParameterHandler::set_parameter_change_callback(
        std::function<void(const std::string&, const rclcpp::Parameter&)> callback) {
    external_callback_ = std::move(callback);
    apply_parameters_to_logic_module();
}

void RosParameterHandler::apply_parameters_to_logic_module() {
    if (!external_callback_) {
        return;
    }
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
{%- for field in lu.cpp_data_type %}
    {
    {%- if field.type == "std::string" %}
        rclcpp::Parameter param("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- elif field.type == "double" %}
        rclcpp::Parameter param("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- elif field.type == "int" or field.type == "int32_t" %}
        rclcpp::Parameter param("{{ interface.name }}", static_cast<int64_t>(param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_));
    {%- elif field.type == "bool" %}
        rclcpp::Parameter param("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- else %}
        rclcpp::Parameter param("{{ interface.name }}", param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_);
    {%- endif %}
        external_callback_("{{ interface.name }}", param);
    }
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}
}

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
{%- for field in lu.cpp_data_type %}
{%- if field.type == "std::string" %}
std::string RosParameterHandler::get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const {
    return param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
}

void RosParameterHandler::set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(const std::string& value) {
    auto result = node_->set_parameter(rclcpp::Parameter("{{ interface.name }}", value));
    if (!result.successful) {
        RCLCPP_WARN(node_->get_logger(), "Failed to set parameter '{{ interface.name }}': %s", result.reason.c_str());
    }
}
{%- elif field.type == "double" %}
double RosParameterHandler::get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const {
    return param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
}

void RosParameterHandler::set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(double value) {
    auto result = node_->set_parameter(rclcpp::Parameter("{{ interface.name }}", value));
    if (!result.successful) {
        RCLCPP_WARN(node_->get_logger(), "Failed to set parameter '{{ interface.name }}': %s", result.reason.c_str());
    }
}
{%- elif field.type == "int" or field.type == "int32_t" %}
int RosParameterHandler::get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const {
    return param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
}

void RosParameterHandler::set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(int value) {
    auto result = node_->set_parameter(rclcpp::Parameter("{{ interface.name }}", static_cast<int64_t>(value)));
    if (!result.successful) {
        RCLCPP_WARN(node_->get_logger(), "Failed to set parameter '{{ interface.name }}': %s", result.reason.c_str());
    }
}
{%- elif field.type == "bool" %}
bool RosParameterHandler::get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const {
    return param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
}

void RosParameterHandler::set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(bool value) {
    auto result = node_->set_parameter(rclcpp::Parameter("{{ interface.name }}", value));
    if (!result.successful) {
        RCLCPP_WARN(node_->get_logger(), "Failed to set parameter '{{ interface.name }}': %s", result.reason.c_str());
    }
}
{%- endif %}

{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}

rcl_interfaces::msg::SetParametersResult RosParameterHandler::parameters_callback(
        const std::vector<rclcpp::Parameter> &parameters) {
    rcl_interfaces::msg::SetParametersResult result;
    result.successful = true;

    for (const auto &parameter : parameters) {
        bool handled = false;
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
        if (parameter.get_name() == "{{ interface.name }}") {
            handled = true;
    {%- for field in lu.cpp_data_type %}
        {%- if field.type == "std::string" %}
            if (parameter.get_type() == rclcpp::ParameterType::PARAMETER_STRING) {
                param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = parameter.as_string();
            }
        {%- elif field.type == "double" %}
            if (parameter.get_type() == rclcpp::ParameterType::PARAMETER_DOUBLE) {
                param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = parameter.as_double();
            }
        {%- elif field.type == "int" or field.type == "int32_t" %}
            if (parameter.get_type() == rclcpp::ParameterType::PARAMETER_INTEGER) {
                param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = static_cast<int>(parameter.as_int());
            }
        {%- elif field.type == "bool" %}
            if (parameter.get_type() == rclcpp::ParameterType::PARAMETER_BOOL) {
                param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = parameter.as_bool();
            }
        {%- else %}
            param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = parameter.value_to_string();
        {%- endif %}
    {%- endfor %}
            if (external_callback_) {
                external_callback_(parameter.get_name(), parameter);
            }
        }
{%- endif %}
{%- endfor %}
{%- endif %}
        if (!handled && external_callback_) {
            external_callback_(parameter.get_name(), parameter);
        }
    }

    if (parameter_callback_) {
        auto user_result = parameter_callback_(parameters);
        if (!user_result.successful) {
            return user_result;
        }
    }

    return result;
}

} // namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}
