#pragma once

#include "../interfaces/parameter_handler.hpp"
#include <rclcpp/rclcpp.hpp>
#include <unordered_map>

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

/**
 * @brief Concrete implementation of InterfaceParameterHandler using ROS2 parameters
 * 
 * This class manages all parameter-related ROS2 operations through composition
 */
class RosParameterHandler : public InterfaceParameterHandler {
public:
    explicit RosParameterHandler(rclcpp::Node* node);
    ~RosParameterHandler() override = default;

    void initialize() override;
    void shutdown() override;
    std::vector<RosParam> get_private_parameters() override;
    bool set_private_parameter(const std::string& param_name, const std::string& param_value) override;
    void set_parameter_callback(
        std::function<rcl_interfaces::msg::SetParametersResult(const std::vector<rclcpp::Parameter> &)> callback) override;
    void apply_parameters_to_logic_module() override;

{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    // === Parameter get/set implementations ===
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    {%- for field in lu.cpp_data_type %}
    {%- if field.type == "std::string" %}
    std::string get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const override;
    void set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(const std::string& value) override;
    {%- elif field.type == "double" %}
    double get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const override;
    void set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(double value) override;
    {%- elif field.type == "int" or field.type == "int32_t" %}
    int get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const override;
    void set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(int value) override;
    {%- elif field.type == "bool" %}
    bool get_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter() const override;
    void set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_parameter(bool value) override;
    {%- endif %}
    {%- endfor %}
    {%- endif %}
{%- endfor %}

    // === Parameter callback registration ===
    void set_parameter_change_callback(
        std::function<void(const std::string&, const rclcpp::Parameter&)> callback) override;
{%- endif %}
{%- endif %}

private:
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    // === Parameter storage ===
{%- for interface in args.ros.interfaces if interface.type == "parameter" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    {%- for field in lu.cpp_data_type %}
    {%- if field.type == "std::string" %}
    std::string param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    {%- elif field.type == "double" %}
    double param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    {%- elif field.type == "int" or field.type == "int32_t" %}
    int param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    {%- elif field.type == "bool" %}
    bool param_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    {%- endif %}
    {%- endfor %}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

    // === Parameter callback infrastructure ===
    rclcpp::node_interfaces::OnSetParametersCallbackHandle::SharedPtr param_callback_handle_;
    std::function<void(const std::string&, const rclcpp::Parameter&)> external_callback_;
    std::function<rcl_interfaces::msg::SetParametersResult(const std::vector<rclcpp::Parameter> &)> parameter_callback_;
    
    // === Internal callback method ===
    rcl_interfaces::msg::SetParametersResult parameters_callback(
        const std::vector<rclcpp::Parameter> &parameters);
};

} // namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}