/*
* This file is auto-generated using Jinja2.
* It creates a ROS node with the specified topics, services, and actions.
*/

#pragma once
#include <string>
#include <vector>
#include <rclcpp/rclcpp.hpp>

#include "ros/ros_input_interface.hpp"
#include "ros/ros_output_interface.hpp"

#include "{{ args.package.name }}/{{ args.package.name }}.hpp"

namespace {{ args.package.name }} {

struct RosParam {
std::string name;
std::string value;
};

/*  ROS and non-ROS module interface
 *
 * out: Something that the node provides to other nodes.
 *      Normally, only one topic, service or action can be published
 *      under the service name.
 * in: Something the node can consume from other nodes.
 *     One of multiple topic/service/action subscribers/clients
 *     connecting to the service name.
 *
 *
 *  topic
 *  ----       
 *  other           -----------------------------------       ----------------------------------- 
 *  ROS Nodes      |ROSNode |                          |     | Logic Module |                    |
 *              in |--------                           |     |--------------                     |
 *   publisher  -->| sub_xyz calls callback_sub_xyz()  | --> | process_sub_xyz()                 |
 *              out|                                   |     |                                   |
 *   subscriber <--| pub_abc                           | <-- | interface_pub_abc()               |
 *                  -----------------------------------       ----------------------------------- 
 *
 *  service
 *  ----
 *  other           ---------------------------------------       ----------------------------------- 
 *  ROS Nodes      |ROSNode |                              |     | Logic Module |                    |
 *              in |--------                               |     |--------------                     |
 *   service    -->| client_xyz                            | <-- | interface_srv()                   |
 *              out|                                       |     |                                   |
 *   client     <--| service_abc calls callback_srv_abc()  | --> | process_pub_abc()                 |
 *                  ---------------------------------------       ----------------------------------- 
 */

class ROSNode : public RosInputInterface, public RosOutputInterface, public rclcpp::Node
{
public:
  ROSNode();
  ~ROSNode();

  std::vector<RosParam> get_private_parameters();

  bool set_private_parameter(const std::string& param_name, const std::string& param_value);

private:
  /****************** Private Members ******************/
  // === Logic module instance ===
  LogicModule logic_module_;

  /****************** ROS Node Initialization ******************/
  void init();
  void init_ros_interface_subscribers();
  void init_ros_interface_publishers();
  void init_ros_interface_services();
  void init_ros_interface_clients();
  void init_ros_interface_action_services();
  void init_ros_interface_action_clients();
  void init_logic_module();

  /****************** Interface Members ******************/
  // === Initialize publishers and subscribers ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces|sort(reverse=true, attribute="direction")
    if interface.type == "topic" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
  {%- if interface.direction == "in" %}
  // Subscriber: {{ interface.description }}
  rclcpp::Subscription<{{ lu.ros_data_type }}>::SharedPtr sub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
  {%- elif interface.direction == "out" %}
  // Publisher: {{ interface.description }}
  rclcpp::Publisher<{{ lu.ros_data_type }}>::SharedPtr pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
  {%- endif %}
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown topic interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

  // === Initialize services ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces|sort(reverse=true, attribute="direction")
  if interface.type == "service" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
  {%- if interface.direction == "out" %}
  // Service server: {{ interface.description }}
  rclcpp::Service<{{ lu.ros_data_type }}>::SharedPtr service_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
  {%- elif interface.direction == "in" %}
  // Service client: {{ interface.description }}
  rclcpp::Client<{{ lu.ros_data_type }}>::SharedPtr client_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
  {%- endif %}
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

  // === Initialize actions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces|sort(reverse=true, attribute="direction")
  if interface.type == "action" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
  {%- if interface.direction == "out" %}
  // Action server: {{ interface.description }}
  {%- elif interface.direction == "in" %}
  // Action client: {{ interface.description }}
  {%- endif %}
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown action interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

  // Service interfaces: servers and clients

  // Action interfaces: servers and clients (using dynamic allocation)

  /****************** Callback Functions ******************/
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
  // === Topic subscriber callbacks ===
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
  void callback_sub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const {{ lu.ros_data_type }} & msg) override;
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown topic interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}

  // === Service server callbacks ===
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
  {%- set decl = "void callback_srv_" ~ interface.name|regex_replace('[^A-Za-z0-9]', '_') ~ "_(" %}
  {%- set indent = " " * (decl|length) %}
  {{ decl }}const std::shared_ptr<{{ lu.ros_data_type }}::Request> req,
  {{ indent }}std::shared_ptr<{{ lu.ros_data_type }}::Response> res) override;
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}

  // === Action server callbacks ===
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
  // void callback_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const {{ lu.ros_data_type }}::GoalConstPtr &goal) override;
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown action interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

  /****************** Interface Functions ******************/
  // === Topic publisher ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
  // {{ interface.description }}
  void interface_pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(
    {%- for field in lu.cpp_data_type -%}
        const {{ field.type }} &msg_{{field.name}}{% if not loop.last %}, {% endif %}
    {%- endfor -%}
  ) override;
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown topic interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

  // === Service call ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
  {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
  {%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
  // {{ interface.description }}
  {%- set decl = "bool interface_srv_" ~ interface.name|regex_replace('[^A-Za-z0-9]', '_') ~ "_(" %}
  {%- set indent = " " * (decl|length) %}
  {{ decl }}
  {%- for req in lu.cpp_data_type.req %}
  {%- if not loop.first %}{{ indent }}{% endif %}{{ req.type }} req_{{ req.name }}{% if not loop.last %}, {% endif %}
  {%- endfor -%}
  {%- if lu.cpp_data_type.req|length > 0 and lu.cpp_data_type.res|length > 0 %},{% endif %}
  {%- for res in lu.cpp_data_type.res %}
  {{ indent }}{{ res.type }} & res_{{ res.name }}{% if not loop.last %}, {% endif %}
  {%- endfor -%}
  ) override;
  {%- else %}
  // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
  {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

  // === Action server callbacks ===
  {%- if args.ros is defined %}
  {%- if args.ros.interfaces is defined %}
  {%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in"
  %}
  void callback_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const {{
  interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::GoalConstPtr &goal) override;
  {% endfor %}
  {%- endif %}
  {%- endif %}
  };
  
  } // namespace {{ args.package.name }}
