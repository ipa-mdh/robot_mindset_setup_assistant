#pragma once

#include <string>
#include <functional>
#include <memory>
#include <spdlog/spdlog.h>

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
#include <{{ lu.include }}.hpp>
{%- endif %}
{%- endfor %}
{%- endif %}

/**
 * @file service_handler.hpp
 * @brief Service interface handler for server/client operations
 * 
 * This class handles all service-related business logic, including:
 * - Processing incoming service requests (servers)
 * - Making outgoing service calls (clients)
 * - Request/response validation and transformation
 */

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

/**
 * @class ServiceHandler
 * @brief Handles all service-related business logic
 * 
 * This class encapsulates service-specific operations, providing a clean
 * interface for service server/client functionality while maintaining
 * separation from ROS infrastructure concerns.
 */
class ServiceHandler {
public:
    ServiceHandler();
    virtual ~ServiceHandler() = default;

    // =============================================================================
    // SERVICE SERVER METHODS
    // =============================================================================
    // These methods handle incoming service requests
    
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
    /**
     * @brief Process service request: {{ interface.name }}
     * @param request The incoming service request
     * @param response The service response to populate
     * 
     * Description: {{ interface.description }}
     * Service Type: {{ lu.ros_data_type }}
     */
    void process_service_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
        const std::shared_ptr<{{ lu.ros_data_type }}::Request> request,
        std::shared_ptr<{{ lu.ros_data_type }}::Response> response);

{%- endif %}
{%- endfor %}
{%- endif %}

    // =============================================================================
    // SERVICE CLIENT METHODS
    // =============================================================================
    // These methods initiate service calls to external services
    
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
    /**
     * @brief Call external service: {{ interface.name }}
     * @param request The service request to send
     * 
     * Description: {{ interface.description }}
     * Service Type: {{ lu.ros_data_type }}
     */
    void call_service_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
        const std::shared_ptr<{{ lu.ros_data_type }}::Request> request);

    /**
     * @brief Handle response from service call: {{ interface.name }}
     * @param response The service response received
     * 
     * Description: {{ interface.description }}
     * Service Type: {{ lu.ros_data_type }}
     */
    void handle_service_response_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
        const std::shared_ptr<{{ lu.ros_data_type }}::Response> response);

{%- endif %}
{%- endfor %}
{%- endif %}

    // =============================================================================
    // CALLBACK REGISTRATION
    // =============================================================================
    // Methods to register ROS-layer callbacks for service calls
    
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
    void set_service_call_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
        std::function<void(const std::shared_ptr<{{ lu.ros_data_type }}::Request>)> callback);

{%- endif %}
{%- endfor %}
{%- endif %}

private:
    // =============================================================================
    // SERVICE CALL CALLBACK FUNCTIONS
    // =============================================================================
    // These callbacks are provided by the ROS layer for actual service calls
    
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
    std::function<void(const std::shared_ptr<{{ lu.ros_data_type }}::Request>)> srv_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;

{%- endif %}
{%- endfor %}
{%- endif %}
};

}  // namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}