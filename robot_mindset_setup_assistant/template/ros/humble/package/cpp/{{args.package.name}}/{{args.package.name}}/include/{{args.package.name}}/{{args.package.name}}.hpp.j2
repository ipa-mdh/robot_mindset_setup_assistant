#pragma once

#include <string>
#include <spdlog/spdlog.h>

#include "{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}/{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}_input_interface.hpp"
#include "{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}/{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}_output_interface.hpp"

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

class LogicModule : public LogicModuleInputInterface, public LogicModuleOutputInterface
{
public:
    LogicModule();
    void set_logger_level(std::string level_str);

    // test functions
    std::string greet(const std::string& name) const;
    void spdlog_test(double number) const;

    // Action client interface implementations
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type.goal %}
{%- set goal_param_type = lu.cpp_data_type.goal[0].type %}
    void interface_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const {{ goal_param_type }}& goal_param) override;
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
};

}
