#pragma once

#include "base_interface_handler.hpp"
#include <functional>

{#- Initialize an empty list to collect unique message types #}
{%- set unique_msgs = [] %}
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" %}
{#- Check if the message type is already in the list #}
{%- if interface.msgs not in unique_msgs -%}
{#- If not, add it to the list #}
{%- set unique_msgs = unique_msgs.append(interface.msgs) -%}
{%- endif -%}
{%- endfor %}
{%- endif %}
{%- endif %}

{%- for msgs in unique_msgs|sort %}
{%- if msgs in args.lookup.interfaces.msgs %}
{%- set lu = namespace(include=args.lookup.interfaces.msgs[msgs].include) %}
#include "{{ lu.include }}.hpp"
{%- else %}
// implementation is required for msgs: {{ msgs }}
{%- endif %}
{%- endfor %}

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

/**
 * @brief Abstract interface for topic handlers
 * 
 * Provides delegation interface for both publishers and subscribers
 */
class InterfaceTopicHandler : public BaseInterfaceHandler {
public:
    explicit InterfaceTopicHandler(rclcpp::Node* node) : BaseInterfaceHandler(node) {}
    virtual ~InterfaceTopicHandler() = default;

{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    // === Publisher interface methods ===
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    /**
     * @brief Publish message to {{ interface.name }} topic
     * @param {{ interface.description }}
     */
    virtual void publish_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    {%- for field in lu.cpp_data_type %}
        const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}) = 0;
    {%- endif %}
{%- endfor %}

    // === Subscriber callback registration ===
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(data = args.lookup.interfaces.msgs[interface.msgs]) %}
    /**
     * @brief Set callback for {{ interface.name }} topic subscriber
     * @param callback Function to handle incoming messages: {{ interface.description }}
     */
    {%- if lu.data.cpp_data_type and lu.data.cpp_data_type|length > 0 %}
    virtual void set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_callback(
        std::function<void(
    {%- for field in lu.data.cpp_data_type %}
            const {{ field.type }} &{{ field.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %})> callback) = 0;
    {%- else %}
    virtual void set_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_callback(
        std::function<void()> callback) = 0;
    {%- endif %}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
};

} // namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}