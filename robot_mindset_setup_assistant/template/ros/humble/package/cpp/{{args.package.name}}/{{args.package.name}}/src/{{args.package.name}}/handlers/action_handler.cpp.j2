#include "{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}/handlers/action_handler.hpp"

/**
 * @file action_handler.cpp
 * @brief Implementation of action handler for server/client operations
 */

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

ActionHandler::ActionHandler() {
    spdlog::debug("ActionHandler initialized");
}

// =============================================================================
// ACTION SERVER EXECUTION METHODS
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}

void ActionHandler::execute_action_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    const std::shared_ptr<const {{ lu.ros_data_type }}::Goal> goal,
    std::shared_ptr<{{ lu.ros_data_type }}::Feedback> feedback,
    std::shared_ptr<{{ lu.ros_data_type }}::Result> result,
    std::function<bool()> is_canceling,
    std::function<void(std::shared_ptr<{{ lu.ros_data_type }}::Feedback>)> publish_feedback,
    std::function<bool()> is_ok) {
    
    spdlog::info("ActionHandler: Executing action {{ interface.name }}");
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_execute_action_implementation
    // TODO: Implement the core business logic for action server: {{ interface.name }}
    
{%- if lu.cpp_data_type.result %}
    // Default implementation - set result fields based on action type
{%- for result_field in lu.cpp_data_type.result %}
    // result->{{ result_field.name }} = /* your implementation */;
{%- endfor %}
{%- else %}
    // Action has no result fields
{%- endif %}
    spdlog::info("ActionHandler: Action {{ interface.name }} completed (default implementation)");
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_execute_action_implementation

    if (execute_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        execute_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(
            goal,
            feedback,
            result,
            is_canceling,
            publish_feedback,
            is_ok);
    } else {
        spdlog::debug("ActionHandler: No execute callback registered for {{ interface.name }}");
    }
}

{%- endif %}
{%- endfor %}
{%- endif %}

// =============================================================================
// ACTION CLIENT METHODS  
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type.goal %}
{%- set goal_param_type = lu.cpp_data_type.goal[0].type %}

void ActionHandler::trigger_action_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const {{ goal_param_type }}& goal_param) {
    spdlog::info("ActionHandler: Triggering action client {{ interface.name }} with goal: {}", goal_param);
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_trigger_action_implementation
    // TODO: Add your business logic for preparing and triggering action client calls
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_trigger_action_implementation
    
    // Delegate to ROS layer for actual action call
    if (act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(goal_param);
    } else {
        spdlog::warn("ActionHandler: No action callback registered for {{ interface.name }}");
    }
}

void ActionHandler::set_action_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    std::function<void(const {{ goal_param_type }}&)> callback) {
    act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = callback;
    spdlog::debug("ActionHandler: Action callback registered for {{ interface.name }}");
}

void ActionHandler::set_goal_response_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    std::function<void(const rclcpp_action::ClientGoalHandle<{{ lu.ros_data_type }}>::SharedPtr&)> callback) {
    goal_response_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = std::move(callback);
    spdlog::debug("ActionHandler: Goal response callback registered for {{ interface.name }}");
}

void ActionHandler::set_feedback_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    std::function<void(rclcpp_action::ClientGoalHandle<{{ lu.ros_data_type }}>::SharedPtr,
                       const std::shared_ptr<const {{ lu.ros_data_type }}::Feedback>&)> callback) {
    feedback_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = std::move(callback);
    spdlog::debug("ActionHandler: Feedback callback registered for {{ interface.name }}");
}

void ActionHandler::set_result_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    std::function<void(const rclcpp_action::ClientGoalHandle<{{ lu.ros_data_type }}>::WrappedResult&)> callback) {
    result_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = std::move(callback);
    spdlog::debug("ActionHandler: Result callback registered for {{ interface.name }}");
}

void ActionHandler::handle_goal_response_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    const rclcpp_action::ClientGoalHandle<{{ lu.ros_data_type }}>::SharedPtr & goal_handle) {
    if (!goal_handle) {
        spdlog::error("ActionHandler: Goal rejected for {{ interface.name }}");
        return;
    }
    spdlog::info("ActionHandler: Goal accepted for {{ interface.name }}");
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_goal_response_implementation
    // TODO: Add your business logic for when the goal is accepted
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_goal_response_implementation

    if (goal_response_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        goal_response_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(goal_handle);
    } else {
        spdlog::debug("ActionHandler: No goal response callback registered for {{ interface.name }}");
    }
}

void ActionHandler::handle_feedback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    rclcpp_action::ClientGoalHandle<{{ lu.ros_data_type }}>::SharedPtr goal_handle,
    const std::shared_ptr<const {{ lu.ros_data_type }}::Feedback> feedback) {
    spdlog::info("ActionHandler: Received feedback for {{ interface.name }}");
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_feedback_implementation
    // TODO: Add your business logic for processing feedback
{%- if lu.cpp_data_type.feedback %}
    // Available feedback fields:
{%- for feedback_field in lu.cpp_data_type.feedback %}
    // feedback->{{ feedback_field.name }} (type: {{ feedback_field.type }})
{%- endfor %}
{%- endif %}
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_feedback_implementation

    if (feedback_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        feedback_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(goal_handle, feedback);
    } else {
        spdlog::debug("ActionHandler: No feedback callback registered for {{ interface.name }}");
    }
}

void ActionHandler::handle_result_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    const rclcpp_action::ClientGoalHandle<{{ lu.ros_data_type }}>::WrappedResult & result) {
    switch (result.code) {
        case rclcpp_action::ResultCode::SUCCEEDED:
            spdlog::info("ActionHandler: Action {{ interface.name }} succeeded");
            break;
        case rclcpp_action::ResultCode::ABORTED:
            spdlog::warn("ActionHandler: Action {{ interface.name }} was aborted");
            break;
        case rclcpp_action::ResultCode::CANCELED:
            spdlog::warn("ActionHandler: Action {{ interface.name }} was canceled");
            break;
        default:
            spdlog::error("ActionHandler: Action {{ interface.name }} failed with unknown result code");
            break;
    }
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_result_implementation
    // TODO: Add your business logic for processing final results
{%- if lu.cpp_data_type.result %}
    // Available result fields:
{%- for result_field in lu.cpp_data_type.result %}
    // result.result->{{ result_field.name }} (type: {{ result_field.type }})
{%- endfor %}
{%- endif %}
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_result_implementation

    if (result_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        result_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(result);
    } else {
        spdlog::debug("ActionHandler: No result callback registered for {{ interface.name }}");
    }
}

{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
void ActionHandler::set_action_execute_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    std::function<void(const std::shared_ptr<const {{ lu.ros_data_type }}::Goal>&,
                       std::shared_ptr<{{ lu.ros_data_type }}::Feedback>,
                       std::shared_ptr<{{ lu.ros_data_type }}::Result>,
                       std::function<bool()>,
                       std::function<void(std::shared_ptr<{{ lu.ros_data_type }}::Feedback>)>,
                       std::function<bool()>)> callback) {
    execute_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = std::move(callback);
    spdlog::debug("ActionHandler: Execute callback registered for {{ interface.name }}");
}

{%- endif %}
{%- endfor %}
{%- endif %}

}  // namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}