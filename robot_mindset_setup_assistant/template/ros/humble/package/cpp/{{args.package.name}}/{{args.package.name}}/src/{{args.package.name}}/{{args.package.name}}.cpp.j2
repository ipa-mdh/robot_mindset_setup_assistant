#include "{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}/{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}.hpp"

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}
{

LogicModule::LogicModule() {}

std::string LogicModule::greet(const std::string& name) const {
    fmt::print("This is a non-ROS module.\n");

    return fmt::format("Hello, {}! This is a non-ROS module.", name);
}

void LogicModule::spdlog_test(double number) const {
    spdlog::info("Welcome to spdlog version {}.{}.{}  !", SPDLOG_VER_MAJOR, SPDLOG_VER_MINOR,
        SPDLOG_VER_PATCH);

    spdlog::warn("My float {:03.2f}", number);

    spdlog::warn("Easy padding in numbers like {:08d}", 12);
    spdlog::critical("Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}", 42);
    spdlog::info("Support for floats {:03.2f}", 1.23456);
    spdlog::info("Positional args are {1} {0}..", "too", "supported");
    spdlog::info("{:>8} aligned, {:<8} aligned", "right", "left");
}

void LogicModule::set_logger_level(std::string level_str)
{
    // to lower case
    std::transform(level_str.begin(), level_str.end(), level_str.begin(), ::tolower);
    // Set the logger level based on the provided string
    if (level_str == "debug")
    {
        spdlog::set_level(spdlog::level::debug);
        spdlog::info("Log level set to debug");
    }
    else if (level_str == "info")
    {
        spdlog::set_level(spdlog::level::info);
        spdlog::info("Log level set to info");
    }
    else if (level_str == "warn")
    {
        spdlog::set_level(spdlog::level::warn);
        spdlog::info("Log level set to warn");
    }
    else if (level_str == "error")
    {
        spdlog::set_level(spdlog::level::err);       // spdlog::err is equivalent to error
        spdlog::info("Log level set to error");
    }
    else if (level_str == "fatal")
    {
        spdlog::set_level(spdlog::level::critical);  // Mapping fatal to critical
        spdlog::info("Log level set to critical");
    }
    else
    {
        spdlog::set_level(spdlog::level::info);      // Default fallback level
        spdlog::warn("Invalid log level provided ({}). Defaulting to info level.", level_str);
    }
}

{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}

// Action server execution implementations
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- set lu_ros = namespace(ros_data_type=lu.ros_data_type) %}
void LogicModule::execute_action_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    const std::shared_ptr<const {{ lu_ros.ros_data_type }}::Goal> goal,
    std::shared_ptr<{{ lu_ros.ros_data_type }}::Feedback> feedback,
    std::shared_ptr<{{ lu_ros.ros_data_type }}::Result> result,
    std::function<bool()> is_canceling,
    std::function<void(std::shared_ptr<{{ lu_ros.ros_data_type }}::Feedback>)> publish_feedback,
    std::function<bool()> is_ok) {
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_execute_action_implementation
    spdlog::info("Logic Module (non-ROS): Executing action {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}");
    
    // Check if there is a cancel request
    if (is_canceling()) {
        spdlog::info("Logic Module (non-ROS): Action {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }} was canceled");
        return;
    }
    
    // TODO: Implement your action server business logic here
    // This is a template - replace with your actual implementation
    
    // Example default implementation - override this method in your LogicModule
    spdlog::warn("Logic Module (non-ROS): Default action execution for {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }} - implement your logic here");
    
    // You can use the provided functions:
    // - is_canceling() to check for cancellation
    // - publish_feedback(feedback) to publish feedback
    // - is_ok() to check if ROS is still running
    // - Set values in result before returning
    
    // Example: Simple feedback publishing
    if (is_ok()) {
        publish_feedback(feedback);
        spdlog::info("Logic Module (non-ROS): Published feedback for action {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}");
    }
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_execute_action_implementation
}
{%- endif %}
{%- endfor %}

// Action client interface implementations
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type.goal %}
{%- set goal_param_type = lu.cpp_data_type.goal[0].type %}
void LogicModule::interface_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const {{ goal_param_type }}& goal_param) {
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_interface_act_implementation
    // TODO: Implement your action client interface logic here
    // This method is called when the action client interface is triggered
    
    // Call the ROS layer action client callback (with underscore)
    if (act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(goal_param);
    }
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_interface_act_implementation
}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

}
