#pragma once

#include <string>
#include <spdlog/spdlog.h>

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

class LogicModuleOutputInterface {
public:
    virtual ~LogicModuleOutputInterface() = default;

    // === Setter for the callback interface function ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    // {{ interface.description }}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type=args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    void set_pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const std::function<void(
        {%- for field in lu.cpp_data_type -%}
        const {{ field.type }}&{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    )> callback)
    {
        pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = callback;
    }
    {%- else %}
    // For other message types, implemetnation is required
    // void set_pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const std::function<void( <corresponding-cpp-data-type>)> callback)
    // {
    //   pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = callback;
    // }
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

    // === Action client interface functions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
    // {{ interface.description }} - Action client interface function
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    virtual void interface_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
        {%- if lu.cpp_data_type.goal %}
        {%- for field in lu.cpp_data_type.goal -%}
        const {{ field.type }}&{% if not loop.last %} param_{{ loop.index0 }}, {% endif %}
        {%- endfor %}
        {%- else %}
        // No goal parameters defined for {{ interface.msgs }}
        {%- endif %}
    ) = 0;
    {%- else %}
    // For other action types, implementation is required
    // virtual void interface_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(<goal-parameters>) = 0;
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

    // === Service client interface functions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
    // {{ interface.description }} - Service client interface function
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    virtual void interface_srv_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_call(
        std::shared_ptr<{{ lu.ros_data_type }}::Request> request) = 0;
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

    // === Topic publisher interface functions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    // {{ interface.description }} - Topic publisher interface function
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    {%- for field in lu.cpp_data_type %}
    void interface_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_publish(const {{ field.type }}& data);
    {%- endfor %}
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown topic interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

    // === Setter for action client callback interface functions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
    // {{ interface.description }} - Action client callback setter
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    void set_act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const std::function<void(
        {%- if lu.cpp_data_type.goal %}
        {%- for field in lu.cpp_data_type.goal -%}
        const {{ field.type }}&{% if not loop.last %}, {% endif %}
        {%- endfor %}
        {%- else %}
        // No goal parameters defined for {{ interface.msgs }}
        {%- endif %}
    )> callback)
    {
        act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = callback;
    }
    {%- else %}
    // For other action types, implementation is required
    // void set_act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const std::function<void(<goal-parameters>)> callback)
    // {
    //   act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = callback;
    // }
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

protected:
    // === Callback function for the interface ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    // {{ interface.description }}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type=args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}    
    std::function<void(
    {%- for field in lu.cpp_data_type -%}
        const {{ field.type }}&{% if not loop.last %}, {% endif %}
    {%- endfor -%}
        )> pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    
    {%- else %}
// For other message types, implemetnation is required
// std::function <const {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}> pub_callback_{{ interface.name }}_;
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

    // === Action client callback functions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
    // {{ interface.description }} - Action client callback
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    std::function<void(
    {%- if lu.cpp_data_type.goal %}
    {%- for field in lu.cpp_data_type.goal -%}
        const {{ field.type }}&{% if not loop.last %}, {% endif %}
    {%- endfor %}
    {%- else %}
        // No goal parameters defined for {{ interface.msgs }}
    {%- endif %}
        )> act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    {%- else %}
// For other action types, implementation is required
// std::function<void(<goal-parameters>)> act_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_;
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
};

} // namespace: {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}