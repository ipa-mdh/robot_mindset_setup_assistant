#include "{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}/handlers/topic_handler.hpp"

/**
 * @file topic_handler.cpp
 * @brief Implementation of topic handler for publish/subscribe operations
 */

namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}} {

TopicHandler::TopicHandler() {
    spdlog::debug("TopicHandler initialized");
}

// =============================================================================
// PUBLISHER METHODS
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
{%- set data_type = lu.cpp_data_type[0].type %}
void TopicHandler::publish_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const {{ data_type }}& data) {
    spdlog::info("TopicHandler: Publishing to {{ interface.name }}");
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_publish_implementation
    // TODO: Add your business logic for processing outgoing data here
    // This method is called when you want to publish data to the {{ interface.name }} topic
    
    // Example data processing:
{%- if 'string' in interface.msgs.lower() %}
    // // Process string data
    // auto processed_data = data;
    // if (!data.empty()) {
    //     processed_data = "Processed: " + data;
    // }
{%- elif 'int' in interface.msgs.lower() or 'float' in interface.msgs.lower() or 'double' in interface.msgs.lower() %}
    // // Process numeric data
    // auto processed_data = data;
    // if (data > threshold_) {
    //     processed_data = apply_transformation(data);
    // }
{%- else %}
    // // Process {{ interface.msgs }} data
    // auto processed_data = data;
    // // Add your transformation logic here
{%- endif %}
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_publish_implementation
    
    // Delegate to ROS layer for actual publishing
    if (pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_) {
        pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(data);
    } else {
        spdlog::warn("TopicHandler: No publish callback registered for {{ interface.name }}");
    }
}

{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

// =============================================================================
// SUBSCRIBER CALLBACK METHODS
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
{%- set data_type = lu.cpp_data_type[0].type %}
void TopicHandler::process_subscription_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(const {{ data_type }}& data) {
    spdlog::info("TopicHandler: Received message on {{ interface.name }}: {}", 
{%- if 'string' in interface.msgs.lower() %}
                 data);
{%- elif 'int' in interface.msgs.lower() or 'float' in interface.msgs.lower() or 'double' in interface.msgs.lower() %}
                 data);
{%- else %}
                 "complex_message");
{%- endif %}
    
    // JINJA-BEGIN:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_subscription_implementation
    // TODO: Add your business logic for processing incoming {{ interface.msgs }} data here
    
    // Example processing:
{%- if 'string' in interface.msgs.lower() %}
    // // Validate and process string data
    // if (!data.empty() && data.length() < max_length_) {
    //     process_valid_string(data);
    // } else {
    //     spdlog::warn("Invalid string data received");
    // }
{%- elif 'int' in interface.msgs.lower() or 'float' in interface.msgs.lower() or 'double' in interface.msgs.lower() %}
    // // Validate and process numeric data
    // if (data >= min_value_ && data <= max_value_) {
    //     update_internal_state(data);
    // }
    // 
    // // Trigger dependent processing
    // if (data > threshold_) {
    //     trigger_alert();
    // }
{%- elif 'bool' in interface.msgs.lower() %}
    // // Handle boolean state change
    // if (data) {
    //     activate_feature();
    // } else {
    //     deactivate_feature();
    // }
{%- else %}
    // // Process {{ interface.msgs }} data
    // // Add your custom processing logic here
    // validate_message(data);
    // update_state_from_message(data);
{%- endif %}
    // JINJA-END:{{ interface.name|regex_replace('[^A-Za-z0-9]', '-') }}_subscription_implementation
}

{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

// =============================================================================
// CALLBACK REGISTRATION
// =============================================================================

{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
{%- set lu = args.lookup.interfaces.msgs[interface.msgs] %}
{%- if lu.cpp_data_type and lu.cpp_data_type|length > 0 %}
{%- set data_type = lu.cpp_data_type[0].type %}
void TopicHandler::set_publish_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
    std::function<void(const {{ data_type }}&)> callback) {
    pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = callback;
    spdlog::debug("TopicHandler: Publish callback registered for {{ interface.name }}");
}
{%- endif %}

{%- endif %}
{%- endfor %}
{%- endif %}

}  // namespace {{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}