#include "ros/ros_node.hpp"

namespace {{ args.package.name }}
{

/****************** Constructor & Destructor ******************/
ROSNode::ROSNode() : Node("{{ args.package.name }}")
{
    // Initialize the node
    init();
    init_ros_interface_subscribers();
    init_ros_interface_publishers();
    init_ros_interface_services();
    init_ros_interface_clients();
    init_ros_interface_action_services();
    init_ros_interface_action_clients();
    init_logic_module();
}

ROSNode::~ROSNode()
{

}

/****************** Initialization Functions ******************/
void ROSNode::init()
{
    // Initialize private parameters
    std::vector<RosParam> params = get_private_parameters();

    // get log_level from params
    std::string log_level;
    for (const auto& param : params)
    {
        // find config/log_level in a longer stirng
        if (param.name.find("config/log_level") != std::string::npos)
        {
            log_level = param.value;
            break;
        }
    }
    // set log level
    logic_module_.set_logger_level(log_level);
}

void ROSNode::init_ros_interface_subscribers()
{
    // Initialize subscribers
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
    // {{ interface.description }}
    sub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = this->create_subscription<{{ lu.ros_data_type }}>(
        "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}", 10,
        std::bind(&ROSNode::callback_sub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_, this, _1));
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown topic interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

}
void ROSNode::init_ros_interface_publishers()
{
    // Initialize publishers
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
    // {{ interface.description }}
    pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = this->create_publisher<{{ lu.ros_data_type}}>(
        "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}", 10);
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown topic interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
}
void ROSNode::init_ros_interface_services()
{
    // Initialize service
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
    // {{ interface.description }}
    service_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ = this->create_service<{{ lu.ros_data_type }}(
        "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}", 
        std::bind(&ROSNode::callback_srv_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_, this, _1, _2));
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
}
void ROSNode::init_ros_interface_clients()
{
    // Initialize clients
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type) %}
    // {{ interface.description }}
    client_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_ =  this->create_client<lu.ros_data_type>(
        "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}")
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown client interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
}
void ROSNode::init_ros_interface_action_services()
{
    // Initialize action servces
}
void ROSNode::init_ros_interface_action_clients()
{
    // Initialize action clients
}
void ROSNode::init_logic_module()
{
    // Initialize ROS interface
    // Set external callbacks: publisher
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{% for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
{%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    logic_module_.set_pub_callback_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
        [this](const {{ lu.cpp_data_type }} &msg) {
        this->interface_pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(msg);
        }
    );
{%- else %}
    // For other message types, implemetnation is required
    //   interface: {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}
    //   ros_data_type: {{ lu.ros_data_type }}
    //   cpp_data_type: {{ lu.cpp_data_type }}
{%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}
}

/****************** Parameter Functions ******************/

/// @brief Funtion to get all private parameters of a node
/// @return private_params
std::vector<RosParam> ROSNode::get_private_parameters()
{
    std::vector<std::string> all_params;
    std::vector<RosParam> private_params;

    nh_private_.getParamNames(all_params);

    std::string node_ns = nh_private_.getNamespace();  // e.g., /my_ns/my_node
    // RCLCPP_DEBUG_STREAM(this->get_logger(), "Private namespace: " << node_ns);
    for (const auto& param : all_params)
    {
        // RCLCPP_DEBUG_STREAM(this->get_logger(), "param: " << param);
        if (param.find(node_ns + "/") == 0)  // check if it's in the private scope
        {
            // RCLCPP_DEBUG_STREAM(this->get_logger(), "Private param: " << param);
            RosParam buffer;
            buffer.name = param;
            // Get the parameter value
            nh_private_.getParam(param, buffer.value);
            // Add the parameter to the vector
            private_params.push_back(buffer);
        }
    }

    return private_params;
}

/// @brief Funktion to set a private parameter
/// @param param_name 
/// @param param_value 
/// @return True if the parameter was set successfully, false otherwise
bool ROSNode::set_private_parameter(const std::string& param_name, const std::string& param_value) {
    // Check if the parameter name is valid
    if (param_name.empty() || param_value.empty()) {
        RCLCPP_ERROR_STREAM(this->get_logger(), "Invalid parameter name or value");
        return false;
    }

    // Set the parameter
    nh_private_.setParam(param_name, param_value);

    // Check if the parameter was set successfully
    std::string value;
    if (nh_private_.getParam(param_name, value)) {
        RCLCPP_INFO_STREAM(this->get_logger(), "Private parameter set: " << param_name << " = " << value);
        return true;
    } else {
        RCLCPP_ERROR_STREAM(this->get_logger(), "Failed to set private parameter: " << param_name);
        return false;
    }
}

// /****************** Callback Functions ******************/

// === Topic subscriber ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
// {{ interface.description }}
void ROSNode::callback_sub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const {{ lu.ros_data_type }} & msg)
{
    // convert data to custom message
{%- for field in lu.cpp_data_type %}
    {{ field.type }} msg_{{ field.name }} = msg.{{ field.name }};
{%- endfor %}

    logic_module_.process_sub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(
{%- for field in lu.cpp_data_type %}
        msg_{{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %});
}
    {%- else %}
// {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown subsrciber interface.msgs: {{ interface.msgs }}
    {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

// === Service call ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                         cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
// {{ interface.description }}
void ROSNode::callback_srv_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const std::shared_ptr<{{ lu.ros_data_type }}::Request> req, std::shared_ptr<{{ lu.ros_data_type }}::Response> res)
{
    RCLCPP_DEBUG_STREAM(this->get_logger(), "Received on topic {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}" << req->data);

{%- for field in lu.cpp_data_type.req %}
    {{ field.type }} req_{{ field.name }};
{%- endfor %}
{%- for field in lu.cpp_data_type.res %}
    {{ field.type }} res_{{ field.name }};
{%- endfor %}

{%- if lu.cpp_data_type.req|length > 0 %}
    // convert data to custom message
{%- for field in lu.cpp_data_type.req %}
    req_{{ field.name }} = req->{{ field.name }};
{%- endfor %}
{%- endif %}

    // Process the request
    logic_module_.process_srv_{{interface.name|regex_replace('[^A-Za-z0-9]', '_')}}(
        {%- for req in lu.cpp_data_type.req %}
        req_{{ req.name }}{% if not loop.last %}, {% endif %}
        {%- endfor %}
        {%- if lu.cpp_data_type.req|length > 0 and lu.cpp_data_type.res|length > 0 %},{% endif %}
        {%- for res in lu.cpp_data_type.res %}
        res_{{ res.name }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    );

{%- if lu.cpp_data_type.res|length > 0 %}
    // convert data to ros message
{%- for field in lu.cpp_data_type.res %}
    res->{{ field.name }} = res_{{ field.name }};
{%- endfor %}
{%- endif %}
}
    {%- else %}
// {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

// === Action server callbacks ===
{# {%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
void ROSNode::callback_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::GoalConstPtr &goal) 
{
    // Create a new goal
    {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::Goal goal_out;
    // Set the goal
    goal_out = *goal;
    // Process the goal
    logic_module_.process_act_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(goal_out);
}
{%- endfor %}
{%- endif %}
{%- endif %} #}


/****************** Interface Functions ******************/
// === Topic publisher ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
// {{ interface.description }}
void ROSNode::interface_pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(
{%- for field in lu.cpp_data_type %}
    {{ field.type }} msg_{{ field.name }}{% if not loop.last %}, {% endif %}
{%- endfor %})
{
    {{ lu.ros_data_type }} msg;

    {%- for field in lu.cpp_data_type %}
    msg.{{ field.name }} = msg_{{ field.name }};
    {%- endfor %}

    this->pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}->publish(msg);
}
    {%- else %}
// Implementation is required: virtual void interface_pub_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(const {{ interface.msgs }} &msg) = 0;
    {%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}

// === Service call ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
    {%- if args.lookup.interfaces.msgs[interface.msgs] is defined %}
    {%- set lu = namespace(ros_data_type = args.lookup.interfaces.msgs[interface.msgs].ros_data_type,
                           cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
// {{ interface.description }}
bool ROSNode::interface_srv_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}_(
    {%- for req in lu.cpp_data_type.req -%}
    {{ req.type }} req_{{ req.name }}{% if not loop.last %}, {% endif -%}
    {%- endfor -%}
    {%- if lu.cpp_data_type.req|length > 0 and lu.cpp_data_type.res|length > 0 %}, {% endif -%}
    {%- for res in lu.cpp_data_type.res -%}
    {{ res.type }} & res_{{ res.name }}{% if not loop.last %}, {% endif -%}
    {%- endfor -%}
    )
{
    {{ lu.ros_data_type }}::Request req;
    {{ lu.ros_data_type }}::Response res;

    {%- for field in lu.cpp_data_type.req %}
    req.{{ field.name }} = req_{{field.name}};
    {%- endfor %}

    this->client_{{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}(req, res);

    {%- for field in lu. cpp_data_type.res %}
    res_{{ field.name }} = res.{{ field.name }};
    {%- endfor %}
}
    {%- else %}
    // {{ interface.name|regex_replace('[^A-Za-z0-9]', '_') }}: Unknown service interface.msgs: {{ interface.msgs }}
    {%- endif %}
{% endfor %}
{%- endif %}
{%- endif %}

}