# -----------------------------------------------------------------------------
# This file was automatically generated by robot_mindset_setup_assistant.
# Do not edit this file manually as your changes may be overwritten.
# If you want to customize behavior, edit the relevant templates or
# custom sections instead.
# -----------------------------------------------------------------------------

import os
import shutil
from pathlib import Path
import yaml
from loguru import logger

import launch
import launch_ros
from ament_index_python.packages import get_package_share_directory
from moveit_configs_utils.launch_utils import (
    add_debuggable_node,
    DeclareBooleanLaunchArg,
)
from moveit_configs_utils import MoveItConfigsBuilder


def generate_standard_launch_description():
    """
    Generate a standard launch description.
    """
    logger.info("---- Multi Serve -----")
    # Set default launch arguments
    namespace = launch.substitutions.LaunchConfiguration('namespace', default='{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}')
    simulation = launch.substitutions.LaunchConfiguration('simulation', default='true')
    simulation_with_gazebo = launch.substitutions.LaunchConfiguration('simulation_with_gazebo', default='false')
    gazebo_classic = launch.substitutions.LaunchConfiguration('gazebo_classic', default='true')

    # get path of package
    package_path = Path(get_package_share_directory('{{ args.package.name |regex_replace('[^A-Za-z0-9]', '_')}}'))

    default_instance_config = package_path / 'instance_config'
    instance_config_folder = launch.substitutions.LaunchConfiguration('instance_config_folder', default=str(default_instance_config))

    return [
        launch.actions.DeclareLaunchArgument('namespace', default_value=namespace),
        launch.actions.DeclareLaunchArgument('simulation', default_value=simulation),
        launch.actions.DeclareLaunchArgument('simulation_with_gazebo', default_value=simulation_with_gazebo),
        launch.actions.DeclareLaunchArgument('gazebo_classic', default_value=gazebo_classic),
        launch.actions.DeclareLaunchArgument('instance_config_folder', default_value=instance_config_folder),
    ]

def load_yaml(file: Path):
    config = {}
    if file.exists():
        with open(file, 'r') as f:
            config = yaml.safe_load(f)
    else:
        logger.warning(f"Config file {file} does not exist. Using empty config.")
    
    return config

def get_config(config_file: Path):
    config = load_yaml(config_file)

    # if key parameters is not in config
    if 'parameters' not in config:
        logger.warning(f"Key 'parameters' not found in config file. Using empty parameters.")
        config.update({'parameters': {}})
    
    return config

def get_instance_config(path: Path, instance: str):
    config = {}
    config_file = path / instance / 'config.yaml'

    logger.info(f"[{instance}] get config")
    config = get_config(config_file)

    return config

def copy_instance_config_folder(instance_config_folder: Path, namespace: str, package: str):
    source = Path(get_package_share_directory(package)) / 'example' / 'instance_config' / package

    if source.exists():
        destination = instance_config_folder / namespace

        if not instance_config_folder.exists():
            instance_config_folder.mkdir(parents=True)

        if not destination.exists():
            logger.info(f"Copying instance config folder from {source} to {destination}")
            shutil.copytree(source, destination)
        else:
            logger.warning(f"Instance config folder {destination} already exists. Skipping copy.")
    else:
        logger.error(f"Source instance config folder {source} does not exist. Skipping copy.")

def generate_custom_launch_description(context, *args, **kwargs):
    """
    Generate a custom launch description.
    """
    namespace = launch.substitutions.LaunchConfiguration('namespace').perform(context)
    simulation = launch.substitutions.LaunchConfiguration('simulation').perform(context)
    simulation_with_gazebo = launch.substitutions.LaunchConfiguration('simulation_with_gazebo').perform(context)
    gazebo_classic = launch.substitutions.LaunchConfiguration('gazebo_classic').perform(context)

    instance_config_folder = launch.substitutions.LaunchConfiguration('instance_config_folder').perform(context)
    instance_config_folder = Path(instance_config_folder)

    gz = simulation and simulation_with_gazebo

    launch_description = []

    # --------------------------------------------
    #             package related code
    # --------------------------------------------

{%- if args.multi_serve is defined %}
{%- if args.multi_serve | length > 0 %}
{%- for multi in args.multi_serve %}
    # --- {{multi.name}} ---
    copy_instance_config_folder(instance_config_folder, '{{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}', '{{ multi.package }}')
    {{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}_share_dir = launch_ros.substitutions.FindPackageShare('{{ multi.package }}').perform(context)
    {{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}_launch = Path({{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}_share_dir) / "launch" / "instance.launch.py"

    {{ multi.name | lower | replace(' ', '_') | replace('-', '_') }} = launch.actions.IncludeLaunchDescription(
        launch.launch_description_sources.PythonLaunchDescriptionSource(str({{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}_launch)),
        launch_arguments={
            'namespace': '{{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}',
            'simulation': simulation,
            'simulation_with_gazebo': simulation_with_gazebo,
            'gazebo_classic': gazebo_classic,
            'instance_config_folder': str(instance_config_folder / '{{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}')
        }.items()
    )
    launch_description.append(launch.actions.GroupAction(
        actions=[
            # push-ros-namespace to set namespace of included nodes
            launch_ros.actions.PushRosNamespace('{{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}'),
{%- if args.ros is defined and args.ros.interface_connections is defined %}
{%- for connection in args.ros.interface_connections %}
{%- if connection.interface_in.package_name == multi.package %}
{%- set remap = namespace(src='', dst='') %}
{%- if connection.interface_in.topic is defined and connection.interface_out.topic is defined %}
{%- set remap.src = connection.interface_in.topic | regex_replace('^/', '') %}
{%- set remap.dst = connection.interface_out.topic | regex_replace('^/', '') %}
{%- elif connection.interface_in.service is defined and connection.interface_out.service is defined %}
{%- set remap.src = connection.interface_in.service | regex_replace('^/', '') %}
{%- set remap.dst = connection.interface_out.service | regex_replace('^/', '') %}
{%- elif connection.interface_in.action is defined and connection.interface_out.action is defined %}
{%- set remap.src = connection.interface_in.action | regex_replace('^/', '') %}
{%- set remap.dst = connection.interface_out.action | regex_replace('^/', '') %}
{%- endif %}
{%- if remap.src %}
{%- set out_ns_tmp = namespace(value='') %}
{%- if args.multi_serve is defined %}
{%- for candidate in args.multi_serve %}
{%- if candidate.package == connection.interface_out.package_name %}
{%- set out_ns_tmp.value = candidate.name | lower | replace(' ', '_') | replace('-', '_') %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- if out_ns_tmp.value == '' %}
{%- set out_ns_tmp.value = connection.interface_out.package_name | lower | replace(' ', '_') | replace('-', '_') %}
{%- endif %}
            launch_ros.actions.SetRemap(
                src='{{ remap.src }}',
                dst='/' + '{{ out_ns_tmp.value }}' + '/' + '{{ remap.dst }}'
            ),
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
            {{ multi.name | lower | replace(' ', '_') | replace('-', '_') }}
        ]
    ))
    
{%- endfor %}
{%- endif %}
{%- endif %}

    return launch_description

def generate_launch_description():
    buffer = []
    buffer = generate_standard_launch_description()
    buffer.append(launch.actions.OpaqueFunction(function=generate_custom_launch_description))
    return launch.LaunchDescription(buffer)

if __name__ == '__main__':
    generate_launch_description()