"""ROS-specific topic handler wiring publishers and subscribers."""

from __future__ import annotations

from typing import Any, Callable, Optional

from loguru import logger
from rclpy.node import Node
from rclpy.qos import QoSProfile

from .base import BaseRosHandler

{%- set pub_topics = [] %}
{%- set sub_topics = [] %}
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- set pub_topics = args.ros.interfaces | selectattr('type', 'equalto', 'topic') | selectattr('direction', 'equalto', 'out') | list %}
{%- set sub_topics = args.ros.interfaces | selectattr('type', 'equalto', 'topic') | selectattr('direction', 'equalto', 'in') | list %}
{%- endif %}
{%- if pub_topics %}
from rclpy.publisher import Publisher
{%- endif %}
{%- if sub_topics %}
from rclpy.subscription import Subscription
{%- endif %}

{%- set ns = namespace(imports=[]) %}
{%- if args.ros is defined and args.ros.interfaces is defined %}
{%- for interface in args.ros.interfaces if interface.type == "topic" %}
{%- if interface.msgs in args.lookup.interfaces.msgs %}
{%- set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{%- set parts = include.split('/') %}
{%- if parts|length >= 3 %}
{%- set module_path = parts[0] + '.' + parts[1] %}
{%- set class_name = parts[2].replace('_', ' ') | title | replace(' ', '') %}
{%- set import_line = module_path + '|' + class_name %}
{%- if import_line not in ns.imports %}
{%- set _ = ns.imports.append(import_line) %}
{%- endif %}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- for entry in ns.imports %}
{%- set module, cls = entry.split('|') %}
from {{ module }} import {{ cls }}
{%- endfor %}


class RosTopicHandler(BaseRosHandler):
    """Manage ROS publishers/subscribers and delegate to logic handlers."""

{% if pub_topics or sub_topics %}
    def __init__(self, node: Node) -> None:
        super().__init__(node)
        qos = QoSProfile(depth=10)
        self._qos = qos
{% if pub_topics %}
{%- for interface in pub_topics %}
{% set identifier = interface.name|to_snake_case %}
        self._publisher_{{ identifier }}: Optional[Publisher] = None
{%- endfor %}
{% endif %}
{% if sub_topics %}
{%- for interface in sub_topics %}
{% set identifier = interface.name|to_snake_case %}
        self._subscription_{{ identifier }}: Optional[Subscription] = None
        self._subscription_callback_{{ identifier }}: Optional[Callable[..., None]] = None
{%- endfor %}
{% endif %}

    def initialize(self) -> None:
        logger.debug("RosTopicHandler: Initialising publishers/subscribers")
{% if pub_topics %}
{%- for interface in pub_topics %}
{% if interface.msgs in args.lookup.interfaces.msgs %}
{% set identifier = interface.name|to_snake_case %}
{% set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{% set cls = include.split('/')[2].replace('_', ' ') | title | replace(' ', '') %}
        self._publisher_{{ identifier }} = self.node.create_publisher(
            {{ cls }},
            "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}",
            self._qos,
        )
{%- endif %}
{%- endfor %}
{% endif %}
{% if sub_topics %}
{%- for interface in sub_topics %}
{% if interface.msgs in args.lookup.interfaces.msgs %}
{% set identifier = interface.name|to_snake_case %}
{% set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{% set cls = include.split('/')[2].replace('_', ' ') | title | replace(' ', '') %}
        self._subscription_{{ identifier }} = self.node.create_subscription(
            {{ cls }},
            "{{ interface.name|regex_replace('[^A-Za-z0-9/]', '_') }}",
            self._internal_callback_{{ identifier }},
            self._qos,
        )
{%- endif %}
{%- endfor %}
{% endif %}

    def shutdown(self) -> None:
        logger.debug("RosTopicHandler: Shutting down publishers/subscribers")
{% if pub_topics %}
{%- for interface in pub_topics %}
{% set identifier = interface.name|to_snake_case %}
        self._publisher_{{ identifier }} = None
{%- endfor %}
{% endif %}
{% if sub_topics %}
{%- for interface in sub_topics %}
{% set identifier = interface.name|to_snake_case %}
        self._subscription_{{ identifier }} = None
        self._subscription_callback_{{ identifier }} = None
{%- endfor %}
{% endif %}

{% if pub_topics %}
{%- for interface in pub_topics %}
{% if interface.msgs in args.lookup.interfaces.msgs %}
{% set identifier = interface.name|to_snake_case %}
{% set include = args.lookup.interfaces.msgs[interface.msgs].include %}
{% set cls = include.split('/')[2].replace('_', ' ') | title | replace(' ', '') %}
{% set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    def publish_{{ identifier }}(
        self,
{% for field in lu.cpp_data_type %}
        {{ field.name }}: Any,
{% endfor %}
    ) -> None:
        """Publish message on ROS topic {{ interface.name }}.

        Args:
{% for field in lu.cpp_data_type %}
            {{ field.name }}: Value for field ``{{ field.name }}`` (type: {{ field.type | replace('std::', '') }}).
{% endfor %}
        """
        if self._publisher_{{ identifier }} is None:
            self.node.get_logger().warning("Publisher for {{ interface.name }} not initialised")
            return
        msg = {{ cls }}()
{% for field in lu.cpp_data_type %}
        setattr(msg, "{{ field.name }}", {{ field.name }})
{% endfor %}
        self._publisher_{{ identifier }}.publish(msg)
{%- endif %}
{%- endfor %}
{% endif %}

{% if sub_topics %}
{%- for interface in sub_topics %}
{% if interface.msgs in args.lookup.interfaces.msgs %}
{% set identifier = interface.name|to_snake_case %}
{% set lu = namespace(cpp_data_type = args.lookup.interfaces.msgs[interface.msgs].cpp_data_type) %}
    def set_{{ identifier }}_callback(
        self,
        callback: Callable[[
{% for field in lu.cpp_data_type %}
            Any,
{% endfor %}
        ], None],
    ) -> None:
        """Register logic-layer callback for subscriber {{ interface.name }}.

        Args:
            callback: Callable invoked with message field values when a new
                sample arrives. Signature::

                callback(
{% for field in lu.cpp_data_type %}
                    {{ field.name }}: {{ field.type | replace('std::', '') }}{% if not loop.last %},
{% endif %}
{% endfor %}
                ) -> None
        """
        self._subscription_callback_{{ identifier }} = callback

    def _internal_callback_{{ identifier }}(self, msg: Any) -> None:
        if self._subscription_callback_{{ identifier }} is None:
            self.node.get_logger().warn("No callback registered for {{ interface.name }} subscriber")
            return
        self._subscription_callback_{{ identifier }}(
{% for field in lu.cpp_data_type %}
            getattr(msg, "{{ field.name }}", None),
{% endfor %}
        )
{%- endif %}
{%- endfor %}
{% endif %}
{% else %}
    def __init__(self, node: Node) -> None:  # pragma: no cover - no topics configured
        super().__init__(node)
{% endif %}
