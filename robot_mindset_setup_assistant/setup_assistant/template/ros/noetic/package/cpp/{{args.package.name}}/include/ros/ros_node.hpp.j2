/*
 * This file is auto-generated using Jinja2.
 * It creates a ROS node with the specified topics, services, and actions.
 */

 #pragma once
 #include <string>
 #include <ros/ros.h>
 
 #include "ros/ros_input_interface.hpp"
 #include "ros/ros_output_interface.hpp"
 
 #include "{{ args.package.name }}/{{ args.package.name }}.hpp"
 
 namespace {{ args.package.name }} {
 
  struct RosParam {
    std::string name;
    std::string value;
  };

  class ROSNode : public RosInputInterface, public RosOutputInterface
  {
  public:
    ROSNode();
    ~ROSNode();

    std::vector<RosParam> get_private_parameters();

    bool set_private_parameter(const std::string& param_name, const std::string& param_value);
  
  private:
    /****************** Private Members ******************/
    ros::NodeHandle nh_;  
    ros::NodeHandle nh_private_;

    // === Logic module instance ===
    LogicModule logic_module_;

    /****************** ROS Node Initialization ******************/
    void init();
    void init_ros_interface_subscribers();
    void init_ros_interface_publishers();
    void init_ros_interface_services();
    void init_ros_interface_clients();
    void init_ros_interface_action_services();
    void init_ros_interface_action_clients();
    void init_logic_module();

    /****************** Interface Members ******************/
    // === Initialize publishers and subscribers ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces|sort(reverse=true, attribute="direction")
      if interface.type == "topic" %}
    {%- if interface.direction == "in" %}
    // Topic subscriber for: {{ interface.description }}
    ros::Subscriber sub_{{ interface.name }}_;
    {%- elif interface.direction == "out" %}
    // Topic publisher for: {{ interface.description }}
    ros::Publisher pub_{{ interface.name }}_;
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endif %}

    // === Initialize services ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces|sort(reverse=true, attribute="direction")
      if interface.type == "service" %}
    {%- if interface.direction == "in" %}
    // Service server for: {{ interface.description }}
    ros::ServiceServer service_{{ interface.name }}_;
    {%- elif interface.direction == "out" %}
    // Service client for: {{ interface.description }}
    ros::ServiceClient client_{{ interface.name }}_;
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endif %}

    // === Initialize actions ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces|sort(reverse=true, attribute="direction")
      if interface.type == "action" %}
    {%- if interface.direction == "in" %}
    // Action server for: {{ interface.description }}
    {%- elif interface.direction == "out" %}
    // Action client for: {{ interface.description }}
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endif %}
   
    // Service interfaces: servers and clients
  
    // Action interfaces: servers and clients (using dynamic allocation)
    
    /****************** Callback Functions ******************/
    // === Topic subscriber callbacks ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "in" %}
    void callback_sub_{{ interface.name }}_(const {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::ConstPtr &msg) override;
    {%- endfor %}
{%- endif %}
{%- endif %}
  
    // === Service server callbacks ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "in" %}
    bool callback_srv_{{ interface.name }}_({{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::Request &req, {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::Response &res) override;
    {%- endfor %}
{%- endif %}
{%- endif %}

    // === Action server callbacks ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "in" %}
    void callback_act_{{ interface.name }}_(const {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::GoalConstPtr &goal) override;
    {%- endfor %}
{%- endif %}
{%- endif %}
  
    /****************** Interface Functions ******************/
    // === Topic publisher ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces if interface.type == "topic" and interface.direction == "out" %}
    // {{ interface.description }}
    {%- if interface.msgs == "std_msgs/String" %}
    void interface_pub_{{ interface.name }}_(const std::string &msg) override;
    {%- elif interface.msgs == "std_msgs/Float64" %}
    void interface_pub_{{ interface.name }}_(double msg) override;
    {%- elif interface.msgs == "std_msgs/Float32" %}
    void interface_pub_{{ interface.name }}_(float msg) override;
    {%- elif interface.msgs == "std_msgs/Int32" %}
    void interface_pub_{{ interface.name }}_(int32_t msg) override;
    {%- elif interface.msgs == "std_msgs/Int64" %}
    void interface_pub_{{ interface.name }}_(int64_t msg) override;
    {%- elif interface.msgs == "std_msgs/UInt32" %}
    void interface_pub_{{ interface.name }}_(uint32_t msg) override;
    {%- elif interface.msgs == "std_msgs/UInt64" %}
    void interface_pub_{{ interface.name }}_(uint64_t msg) override;
    {%- elif interface.msgs == "std_msgs/Int8" %}
    void interface_pub_{{ interface.name }}_(int8_t msg) override;
    {%- elif interface.msgs == "std_msgs/UInt8" %}
    void interface_pub_{{ interface.name }}_(uint8_t msg) override;
    {%- elif interface.msgs == "std_msgs/Bool" %}
    void interface_pub_{{ interface.name }}_(bool msg) override;
    {%- elif interface.msgs == "std_msgs/Byte" %}
    void interface_pub_{{ interface.name }}_(uint8_t msg) override;
    {%- elif interface.msgs == "std_msgs/Empty" %}
    void interface_pub_{{ interface.name }}_() override;
    {%- else %}
    // For other message types, implemetnation is required
    // void interface_pub_{{ interface.name }}_(const {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }} &msg) override;
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endif %}

    // === Service call ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces if interface.type == "service" and interface.direction == "out" %}
    // {{ interface.description }}
    {%- if interface.msgs == "std_srvs/SetBool" %}
    bool interface_srv_{{ interface.name }}_(bool req, bool &res) override;
    {%- elif interface.msgs == "std_srvs/Trigger" %}
    bool interface_srv_{{ interface.name }}_(bool req, bool &res) override;
    {%- elif interface.msgs == "std_srvs/Empty" %}
    bool interface_srv_{{ interface.name }}_() override;
    {%- elif interface.msgs == "std_srvs/SetBool" %}
    bool interface_srv_{{ interface.name }}_(bool req, bool &res) override;
    {%- else %}
    // For other message types, implemetnation is required
    //bool interface_srv_{{ interface.name }}_({{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::Request req, {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::Response &res) override;
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endif %}

    // === Action server callbacks ===
{%- if args.ros is defined %}
{%- if args.ros.interfaces is defined %}
    {%- for interface in args.ros.interfaces if interface.type == "action" and interface.direction == "out" %}
    void callback_act_{{ interface.name }}_(const {{ interface.msgs.split('/')[0] }}::{{ interface.msgs.split('/')[1] }}::GoalConstPtr &goal) override;
    {%- endfor %}
{%- endif %}
{%- endif %}

  };
 
 }